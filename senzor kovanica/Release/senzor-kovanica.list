
senzor-kovanica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023dc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002574  08002574  00012574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002584  08002584  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800258c  0800258c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002590  08002590  00012590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000018  080025a8  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080025a8  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025a7  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009c8  00000000  00000000  000225eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00022fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00023793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00006f7e  00000000  00000000  0002477b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001de3  00000000  00000000  0002b6f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0002d4dc  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00001cf4  00000000  00000000  0002d52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800255c 	.word	0x0800255c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	0800255c 	.word	0x0800255c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__gedf2>:
 8000550:	f04f 3cff 	mov.w	ip, #4294967295
 8000554:	e006      	b.n	8000564 <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__ledf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	e002      	b.n	8000564 <__cmpdf2+0x4>
 800055e:	bf00      	nop

08000560 <__cmpdf2>:
 8000560:	f04f 0c01 	mov.w	ip, #1
 8000564:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000568:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800056c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000574:	bf18      	it	ne
 8000576:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800057a:	d01b      	beq.n	80005b4 <__cmpdf2+0x54>
 800057c:	b001      	add	sp, #4
 800057e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000582:	bf0c      	ite	eq
 8000584:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000588:	ea91 0f03 	teqne	r1, r3
 800058c:	bf02      	ittt	eq
 800058e:	ea90 0f02 	teqeq	r0, r2
 8000592:	2000      	moveq	r0, #0
 8000594:	4770      	bxeq	lr
 8000596:	f110 0f00 	cmn.w	r0, #0
 800059a:	ea91 0f03 	teq	r1, r3
 800059e:	bf58      	it	pl
 80005a0:	4299      	cmppl	r1, r3
 80005a2:	bf08      	it	eq
 80005a4:	4290      	cmpeq	r0, r2
 80005a6:	bf2c      	ite	cs
 80005a8:	17d8      	asrcs	r0, r3, #31
 80005aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005ae:	f040 0001 	orr.w	r0, r0, #1
 80005b2:	4770      	bx	lr
 80005b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005bc:	d102      	bne.n	80005c4 <__cmpdf2+0x64>
 80005be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005c2:	d107      	bne.n	80005d4 <__cmpdf2+0x74>
 80005c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005cc:	d1d6      	bne.n	800057c <__cmpdf2+0x1c>
 80005ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005d2:	d0d3      	beq.n	800057c <__cmpdf2+0x1c>
 80005d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <__aeabi_cdrcmple>:
 80005dc:	4684      	mov	ip, r0
 80005de:	4610      	mov	r0, r2
 80005e0:	4662      	mov	r2, ip
 80005e2:	468c      	mov	ip, r1
 80005e4:	4619      	mov	r1, r3
 80005e6:	4663      	mov	r3, ip
 80005e8:	e000      	b.n	80005ec <__aeabi_cdcmpeq>
 80005ea:	bf00      	nop

080005ec <__aeabi_cdcmpeq>:
 80005ec:	b501      	push	{r0, lr}
 80005ee:	f7ff ffb7 	bl	8000560 <__cmpdf2>
 80005f2:	2800      	cmp	r0, #0
 80005f4:	bf48      	it	mi
 80005f6:	f110 0f00 	cmnmi.w	r0, #0
 80005fa:	bd01      	pop	{r0, pc}

080005fc <__aeabi_dcmpeq>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff fff4 	bl	80005ec <__aeabi_cdcmpeq>
 8000604:	bf0c      	ite	eq
 8000606:	2001      	moveq	r0, #1
 8000608:	2000      	movne	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_dcmplt>:
 8000610:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000614:	f7ff ffea 	bl	80005ec <__aeabi_cdcmpeq>
 8000618:	bf34      	ite	cc
 800061a:	2001      	movcc	r0, #1
 800061c:	2000      	movcs	r0, #0
 800061e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000622:	bf00      	nop

08000624 <__aeabi_dcmple>:
 8000624:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000628:	f7ff ffe0 	bl	80005ec <__aeabi_cdcmpeq>
 800062c:	bf94      	ite	ls
 800062e:	2001      	movls	r0, #1
 8000630:	2000      	movhi	r0, #0
 8000632:	f85d fb08 	ldr.w	pc, [sp], #8
 8000636:	bf00      	nop

08000638 <__aeabi_dcmpge>:
 8000638:	f84d ed08 	str.w	lr, [sp, #-8]!
 800063c:	f7ff ffce 	bl	80005dc <__aeabi_cdrcmple>
 8000640:	bf94      	ite	ls
 8000642:	2001      	movls	r0, #1
 8000644:	2000      	movhi	r0, #0
 8000646:	f85d fb08 	ldr.w	pc, [sp], #8
 800064a:	bf00      	nop

0800064c <__aeabi_dcmpgt>:
 800064c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000650:	f7ff ffc4 	bl	80005dc <__aeabi_cdrcmple>
 8000654:	bf34      	ite	cc
 8000656:	2001      	movcc	r0, #1
 8000658:	2000      	movcs	r0, #0
 800065a:	f85d fb08 	ldr.w	pc, [sp], #8
 800065e:	bf00      	nop

08000660 <__aeabi_uldivmod>:
 8000660:	b953      	cbnz	r3, 8000678 <__aeabi_uldivmod+0x18>
 8000662:	b94a      	cbnz	r2, 8000678 <__aeabi_uldivmod+0x18>
 8000664:	2900      	cmp	r1, #0
 8000666:	bf08      	it	eq
 8000668:	2800      	cmpeq	r0, #0
 800066a:	bf1c      	itt	ne
 800066c:	f04f 31ff 	movne.w	r1, #4294967295
 8000670:	f04f 30ff 	movne.w	r0, #4294967295
 8000674:	f000 b974 	b.w	8000960 <__aeabi_idiv0>
 8000678:	f1ad 0c08 	sub.w	ip, sp, #8
 800067c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000680:	f000 f806 	bl	8000690 <__udivmoddi4>
 8000684:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000688:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800068c:	b004      	add	sp, #16
 800068e:	4770      	bx	lr

08000690 <__udivmoddi4>:
 8000690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000694:	9d08      	ldr	r5, [sp, #32]
 8000696:	4604      	mov	r4, r0
 8000698:	468e      	mov	lr, r1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d14d      	bne.n	800073a <__udivmoddi4+0xaa>
 800069e:	428a      	cmp	r2, r1
 80006a0:	4694      	mov	ip, r2
 80006a2:	d969      	bls.n	8000778 <__udivmoddi4+0xe8>
 80006a4:	fab2 f282 	clz	r2, r2
 80006a8:	b152      	cbz	r2, 80006c0 <__udivmoddi4+0x30>
 80006aa:	fa01 f302 	lsl.w	r3, r1, r2
 80006ae:	f1c2 0120 	rsb	r1, r2, #32
 80006b2:	fa20 f101 	lsr.w	r1, r0, r1
 80006b6:	fa0c fc02 	lsl.w	ip, ip, r2
 80006ba:	ea41 0e03 	orr.w	lr, r1, r3
 80006be:	4094      	lsls	r4, r2
 80006c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80006c4:	0c21      	lsrs	r1, r4, #16
 80006c6:	fbbe f6f8 	udiv	r6, lr, r8
 80006ca:	fa1f f78c 	uxth.w	r7, ip
 80006ce:	fb08 e316 	mls	r3, r8, r6, lr
 80006d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80006d6:	fb06 f107 	mul.w	r1, r6, r7
 80006da:	4299      	cmp	r1, r3
 80006dc:	d90a      	bls.n	80006f4 <__udivmoddi4+0x64>
 80006de:	eb1c 0303 	adds.w	r3, ip, r3
 80006e2:	f106 30ff 	add.w	r0, r6, #4294967295
 80006e6:	f080 811f 	bcs.w	8000928 <__udivmoddi4+0x298>
 80006ea:	4299      	cmp	r1, r3
 80006ec:	f240 811c 	bls.w	8000928 <__udivmoddi4+0x298>
 80006f0:	3e02      	subs	r6, #2
 80006f2:	4463      	add	r3, ip
 80006f4:	1a5b      	subs	r3, r3, r1
 80006f6:	b2a4      	uxth	r4, r4
 80006f8:	fbb3 f0f8 	udiv	r0, r3, r8
 80006fc:	fb08 3310 	mls	r3, r8, r0, r3
 8000700:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000704:	fb00 f707 	mul.w	r7, r0, r7
 8000708:	42a7      	cmp	r7, r4
 800070a:	d90a      	bls.n	8000722 <__udivmoddi4+0x92>
 800070c:	eb1c 0404 	adds.w	r4, ip, r4
 8000710:	f100 33ff 	add.w	r3, r0, #4294967295
 8000714:	f080 810a 	bcs.w	800092c <__udivmoddi4+0x29c>
 8000718:	42a7      	cmp	r7, r4
 800071a:	f240 8107 	bls.w	800092c <__udivmoddi4+0x29c>
 800071e:	4464      	add	r4, ip
 8000720:	3802      	subs	r0, #2
 8000722:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000726:	1be4      	subs	r4, r4, r7
 8000728:	2600      	movs	r6, #0
 800072a:	b11d      	cbz	r5, 8000734 <__udivmoddi4+0xa4>
 800072c:	40d4      	lsrs	r4, r2
 800072e:	2300      	movs	r3, #0
 8000730:	e9c5 4300 	strd	r4, r3, [r5]
 8000734:	4631      	mov	r1, r6
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	428b      	cmp	r3, r1
 800073c:	d909      	bls.n	8000752 <__udivmoddi4+0xc2>
 800073e:	2d00      	cmp	r5, #0
 8000740:	f000 80ef 	beq.w	8000922 <__udivmoddi4+0x292>
 8000744:	2600      	movs	r6, #0
 8000746:	e9c5 0100 	strd	r0, r1, [r5]
 800074a:	4630      	mov	r0, r6
 800074c:	4631      	mov	r1, r6
 800074e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000752:	fab3 f683 	clz	r6, r3
 8000756:	2e00      	cmp	r6, #0
 8000758:	d14a      	bne.n	80007f0 <__udivmoddi4+0x160>
 800075a:	428b      	cmp	r3, r1
 800075c:	d302      	bcc.n	8000764 <__udivmoddi4+0xd4>
 800075e:	4282      	cmp	r2, r0
 8000760:	f200 80f9 	bhi.w	8000956 <__udivmoddi4+0x2c6>
 8000764:	1a84      	subs	r4, r0, r2
 8000766:	eb61 0303 	sbc.w	r3, r1, r3
 800076a:	2001      	movs	r0, #1
 800076c:	469e      	mov	lr, r3
 800076e:	2d00      	cmp	r5, #0
 8000770:	d0e0      	beq.n	8000734 <__udivmoddi4+0xa4>
 8000772:	e9c5 4e00 	strd	r4, lr, [r5]
 8000776:	e7dd      	b.n	8000734 <__udivmoddi4+0xa4>
 8000778:	b902      	cbnz	r2, 800077c <__udivmoddi4+0xec>
 800077a:	deff      	udf	#255	; 0xff
 800077c:	fab2 f282 	clz	r2, r2
 8000780:	2a00      	cmp	r2, #0
 8000782:	f040 8092 	bne.w	80008aa <__udivmoddi4+0x21a>
 8000786:	eba1 010c 	sub.w	r1, r1, ip
 800078a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800078e:	fa1f fe8c 	uxth.w	lr, ip
 8000792:	2601      	movs	r6, #1
 8000794:	0c20      	lsrs	r0, r4, #16
 8000796:	fbb1 f3f7 	udiv	r3, r1, r7
 800079a:	fb07 1113 	mls	r1, r7, r3, r1
 800079e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007a2:	fb0e f003 	mul.w	r0, lr, r3
 80007a6:	4288      	cmp	r0, r1
 80007a8:	d908      	bls.n	80007bc <__udivmoddi4+0x12c>
 80007aa:	eb1c 0101 	adds.w	r1, ip, r1
 80007ae:	f103 38ff 	add.w	r8, r3, #4294967295
 80007b2:	d202      	bcs.n	80007ba <__udivmoddi4+0x12a>
 80007b4:	4288      	cmp	r0, r1
 80007b6:	f200 80cb 	bhi.w	8000950 <__udivmoddi4+0x2c0>
 80007ba:	4643      	mov	r3, r8
 80007bc:	1a09      	subs	r1, r1, r0
 80007be:	b2a4      	uxth	r4, r4
 80007c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80007c4:	fb07 1110 	mls	r1, r7, r0, r1
 80007c8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80007cc:	fb0e fe00 	mul.w	lr, lr, r0
 80007d0:	45a6      	cmp	lr, r4
 80007d2:	d908      	bls.n	80007e6 <__udivmoddi4+0x156>
 80007d4:	eb1c 0404 	adds.w	r4, ip, r4
 80007d8:	f100 31ff 	add.w	r1, r0, #4294967295
 80007dc:	d202      	bcs.n	80007e4 <__udivmoddi4+0x154>
 80007de:	45a6      	cmp	lr, r4
 80007e0:	f200 80bb 	bhi.w	800095a <__udivmoddi4+0x2ca>
 80007e4:	4608      	mov	r0, r1
 80007e6:	eba4 040e 	sub.w	r4, r4, lr
 80007ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80007ee:	e79c      	b.n	800072a <__udivmoddi4+0x9a>
 80007f0:	f1c6 0720 	rsb	r7, r6, #32
 80007f4:	40b3      	lsls	r3, r6
 80007f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80007fe:	fa20 f407 	lsr.w	r4, r0, r7
 8000802:	fa01 f306 	lsl.w	r3, r1, r6
 8000806:	431c      	orrs	r4, r3
 8000808:	40f9      	lsrs	r1, r7
 800080a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800080e:	fa00 f306 	lsl.w	r3, r0, r6
 8000812:	fbb1 f8f9 	udiv	r8, r1, r9
 8000816:	0c20      	lsrs	r0, r4, #16
 8000818:	fa1f fe8c 	uxth.w	lr, ip
 800081c:	fb09 1118 	mls	r1, r9, r8, r1
 8000820:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000824:	fb08 f00e 	mul.w	r0, r8, lr
 8000828:	4288      	cmp	r0, r1
 800082a:	fa02 f206 	lsl.w	r2, r2, r6
 800082e:	d90b      	bls.n	8000848 <__udivmoddi4+0x1b8>
 8000830:	eb1c 0101 	adds.w	r1, ip, r1
 8000834:	f108 3aff 	add.w	sl, r8, #4294967295
 8000838:	f080 8088 	bcs.w	800094c <__udivmoddi4+0x2bc>
 800083c:	4288      	cmp	r0, r1
 800083e:	f240 8085 	bls.w	800094c <__udivmoddi4+0x2bc>
 8000842:	f1a8 0802 	sub.w	r8, r8, #2
 8000846:	4461      	add	r1, ip
 8000848:	1a09      	subs	r1, r1, r0
 800084a:	b2a4      	uxth	r4, r4
 800084c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000850:	fb09 1110 	mls	r1, r9, r0, r1
 8000854:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000858:	fb00 fe0e 	mul.w	lr, r0, lr
 800085c:	458e      	cmp	lr, r1
 800085e:	d908      	bls.n	8000872 <__udivmoddi4+0x1e2>
 8000860:	eb1c 0101 	adds.w	r1, ip, r1
 8000864:	f100 34ff 	add.w	r4, r0, #4294967295
 8000868:	d26c      	bcs.n	8000944 <__udivmoddi4+0x2b4>
 800086a:	458e      	cmp	lr, r1
 800086c:	d96a      	bls.n	8000944 <__udivmoddi4+0x2b4>
 800086e:	3802      	subs	r0, #2
 8000870:	4461      	add	r1, ip
 8000872:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000876:	fba0 9402 	umull	r9, r4, r0, r2
 800087a:	eba1 010e 	sub.w	r1, r1, lr
 800087e:	42a1      	cmp	r1, r4
 8000880:	46c8      	mov	r8, r9
 8000882:	46a6      	mov	lr, r4
 8000884:	d356      	bcc.n	8000934 <__udivmoddi4+0x2a4>
 8000886:	d053      	beq.n	8000930 <__udivmoddi4+0x2a0>
 8000888:	b15d      	cbz	r5, 80008a2 <__udivmoddi4+0x212>
 800088a:	ebb3 0208 	subs.w	r2, r3, r8
 800088e:	eb61 010e 	sbc.w	r1, r1, lr
 8000892:	fa01 f707 	lsl.w	r7, r1, r7
 8000896:	fa22 f306 	lsr.w	r3, r2, r6
 800089a:	40f1      	lsrs	r1, r6
 800089c:	431f      	orrs	r7, r3
 800089e:	e9c5 7100 	strd	r7, r1, [r5]
 80008a2:	2600      	movs	r6, #0
 80008a4:	4631      	mov	r1, r6
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	f1c2 0320 	rsb	r3, r2, #32
 80008ae:	40d8      	lsrs	r0, r3
 80008b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008b4:	fa21 f303 	lsr.w	r3, r1, r3
 80008b8:	4091      	lsls	r1, r2
 80008ba:	4301      	orrs	r1, r0
 80008bc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80008c8:	fb07 3610 	mls	r6, r7, r0, r3
 80008cc:	0c0b      	lsrs	r3, r1, #16
 80008ce:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80008d2:	fb00 f60e 	mul.w	r6, r0, lr
 80008d6:	429e      	cmp	r6, r3
 80008d8:	fa04 f402 	lsl.w	r4, r4, r2
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x260>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008e6:	d22f      	bcs.n	8000948 <__udivmoddi4+0x2b8>
 80008e8:	429e      	cmp	r6, r3
 80008ea:	d92d      	bls.n	8000948 <__udivmoddi4+0x2b8>
 80008ec:	3802      	subs	r0, #2
 80008ee:	4463      	add	r3, ip
 80008f0:	1b9b      	subs	r3, r3, r6
 80008f2:	b289      	uxth	r1, r1
 80008f4:	fbb3 f6f7 	udiv	r6, r3, r7
 80008f8:	fb07 3316 	mls	r3, r7, r6, r3
 80008fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000900:	fb06 f30e 	mul.w	r3, r6, lr
 8000904:	428b      	cmp	r3, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x28a>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000910:	d216      	bcs.n	8000940 <__udivmoddi4+0x2b0>
 8000912:	428b      	cmp	r3, r1
 8000914:	d914      	bls.n	8000940 <__udivmoddi4+0x2b0>
 8000916:	3e02      	subs	r6, #2
 8000918:	4461      	add	r1, ip
 800091a:	1ac9      	subs	r1, r1, r3
 800091c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000920:	e738      	b.n	8000794 <__udivmoddi4+0x104>
 8000922:	462e      	mov	r6, r5
 8000924:	4628      	mov	r0, r5
 8000926:	e705      	b.n	8000734 <__udivmoddi4+0xa4>
 8000928:	4606      	mov	r6, r0
 800092a:	e6e3      	b.n	80006f4 <__udivmoddi4+0x64>
 800092c:	4618      	mov	r0, r3
 800092e:	e6f8      	b.n	8000722 <__udivmoddi4+0x92>
 8000930:	454b      	cmp	r3, r9
 8000932:	d2a9      	bcs.n	8000888 <__udivmoddi4+0x1f8>
 8000934:	ebb9 0802 	subs.w	r8, r9, r2
 8000938:	eb64 0e0c 	sbc.w	lr, r4, ip
 800093c:	3801      	subs	r0, #1
 800093e:	e7a3      	b.n	8000888 <__udivmoddi4+0x1f8>
 8000940:	4646      	mov	r6, r8
 8000942:	e7ea      	b.n	800091a <__udivmoddi4+0x28a>
 8000944:	4620      	mov	r0, r4
 8000946:	e794      	b.n	8000872 <__udivmoddi4+0x1e2>
 8000948:	4640      	mov	r0, r8
 800094a:	e7d1      	b.n	80008f0 <__udivmoddi4+0x260>
 800094c:	46d0      	mov	r8, sl
 800094e:	e77b      	b.n	8000848 <__udivmoddi4+0x1b8>
 8000950:	3b02      	subs	r3, #2
 8000952:	4461      	add	r1, ip
 8000954:	e732      	b.n	80007bc <__udivmoddi4+0x12c>
 8000956:	4630      	mov	r0, r6
 8000958:	e709      	b.n	800076e <__udivmoddi4+0xde>
 800095a:	4464      	add	r4, ip
 800095c:	3802      	subs	r0, #2
 800095e:	e742      	b.n	80007e6 <__udivmoddi4+0x156>

08000960 <__aeabi_idiv0>:
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	0000      	movs	r0, r0
	...

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	2300      	movs	r3, #0
{
 800096c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000972:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000976:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800097a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800097e:	4924      	ldr	r1, [pc, #144]	; (8000a10 <SystemClock_Config+0xa8>)
 8000980:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000982:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800098c:	6408      	str	r0, [r1, #64]	; 0x40
 800098e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000990:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000994:	9100      	str	r1, [sp, #0]
 8000996:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	6811      	ldr	r1, [r2, #0]
 800099c:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80009a0:	6011      	str	r1, [r2, #0]
 80009a2:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a4:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8000a00 <SystemClock_Config+0x98>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ac:	2002      	movs	r0, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009b2:	2304      	movs	r3, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b4:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009ba:	22c0      	movs	r2, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009be:	ed8d 7b08 	vstr	d7, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 192;
 80009c2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009c6:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ca:	9c01      	ldr	r4, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f001 f8d0 	bl	8001b70 <HAL_RCC_OscConfig>
 80009d0:	b108      	cbz	r0, 80009d6 <SystemClock_Config+0x6e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d2:	b672      	cpsid	i
 80009d4:	e7fe      	b.n	80009d4 <SystemClock_Config+0x6c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8000a08 <SystemClock_Config+0xa0>
 80009da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009de:	2200      	movs	r2, #0
 80009e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009e4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80009e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009ea:	2103      	movs	r1, #3
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ec:	ed8d 7b02 	vstr	d7, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80009f0:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009f2:	f001 fad5 	bl	8001fa0 <HAL_RCC_ClockConfig>
 80009f6:	b108      	cbz	r0, 80009fc <SystemClock_Config+0x94>
 80009f8:	b672      	cpsid	i
 80009fa:	e7fe      	b.n	80009fa <SystemClock_Config+0x92>
  {
    Error_Handler();
  }
}
 80009fc:	b014      	add	sp, #80	; 0x50
 80009fe:	bd10      	pop	{r4, pc}
 8000a00:	00000001 	.word	0x00000001
 8000a04:	00010000 	.word	0x00010000
 8000a08:	0000000f 	.word	0x0000000f
 8000a0c:	00000002 	.word	0x00000002
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40007000 	.word	0x40007000

08000a18 <main>:
{
 8000a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a1c:	ed2d 8b02 	vpush	{d8}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a20:	2600      	movs	r6, #0
{
 8000a22:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 8000a24:	f000 fd88 	bl	8001538 <HAL_Init>
  SystemClock_Config();
 8000a28:	f7ff ff9e 	bl	8000968 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2c:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8000a30:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a34:	4b79      	ldr	r3, [pc, #484]	; (8000c1c <main+0x204>)
 8000a36:	9604      	str	r6, [sp, #16]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	960c      	str	r6, [sp, #48]	; 0x30
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000a3c:	4878      	ldr	r0, [pc, #480]	; (8000c20 <main+0x208>)
  htim9.Instance = TIM9;
 8000a3e:	4d79      	ldr	r5, [pc, #484]	; (8000c24 <main+0x20c>)
 8000a40:	4c79      	ldr	r4, [pc, #484]	; (8000c28 <main+0x210>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a42:	f041 0110 	orr.w	r1, r1, #16
 8000a46:	6319      	str	r1, [r3, #48]	; 0x30
 8000a48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a4a:	f001 0110 	and.w	r1, r1, #16
 8000a4e:	9104      	str	r1, [sp, #16]
 8000a50:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a52:	9605      	str	r6, [sp, #20]
 8000a54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a56:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8000a5a:	6319      	str	r1, [r3, #48]	; 0x30
 8000a5c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a5e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8000a62:	9105      	str	r1, [sp, #20]
 8000a64:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	9606      	str	r6, [sp, #24]
 8000a68:	6b19      	ldr	r1, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4311      	orrs	r1, r2
 8000a6e:	6319      	str	r1, [r3, #48]	; 0x30
 8000a70:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a72:	4011      	ands	r1, r2
 8000a74:	9106      	str	r1, [sp, #24]
 8000a76:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a78:	9607      	str	r6, [sp, #28]
 8000a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a7c:	f041 0102 	orr.w	r1, r1, #2
 8000a80:	6319      	str	r1, [r3, #48]	; 0x30
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0302 	and.w	r3, r3, #2
 8000a88:	9307      	str	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000a8a:	2104      	movs	r1, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET);
 8000a8e:	f001 f855 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a92:	2204      	movs	r2, #4
 8000a94:	2301      	movs	r3, #1
 8000a96:	e9cd 2308 	strd	r2, r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a9a:	4861      	ldr	r0, [pc, #388]	; (8000c20 <main+0x208>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa0:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aa2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000aa6:	f000 ff57 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000aaa:	2240      	movs	r2, #64	; 0x40
 8000aac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab0:	485b      	ldr	r0, [pc, #364]	; (8000c20 <main+0x208>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab4:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ab6:	e9cd 2308 	strd	r2, r3, [sp, #32]

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aba:	2701      	movs	r7, #1
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f000 ff4c 	bl	8001958 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac6:	4859      	ldr	r0, [pc, #356]	; (8000c2c <main+0x214>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac8:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000acc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f000 ff42 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ad4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ad8:	2207      	movs	r2, #7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ada:	4855      	ldr	r0, [pc, #340]	; (8000c30 <main+0x218>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000ae0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f000 ff38 	bl	8001958 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ae8:	4632      	mov	r2, r6
 8000aea:	4631      	mov	r1, r6
 8000aec:	2006      	movs	r0, #6
 8000aee:	f000 fecd 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000af2:	2006      	movs	r0, #6
 8000af4:	f000 ff08 	bl	8001908 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000af8:	4632      	mov	r2, r6
 8000afa:	4631      	mov	r1, r6
 8000afc:	2007      	movs	r0, #7
 8000afe:	f000 fec5 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b02:	2007      	movs	r0, #7
 8000b04:	f000 ff00 	bl	8001908 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000b08:	4632      	mov	r2, r6
 8000b0a:	4631      	mov	r1, r6
 8000b0c:	2008      	movs	r0, #8
 8000b0e:	f000 febd 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b12:	2008      	movs	r0, #8
 8000b14:	f000 fef8 	bl	8001908 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000b18:	4632      	mov	r2, r6
 8000b1a:	4631      	mov	r1, r6
 8000b1c:	200a      	movs	r0, #10
 8000b1e:	f000 feb5 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000b22:	200a      	movs	r0, #10
 8000b24:	f000 fef0 	bl	8001908 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b28:	4632      	mov	r2, r6
 8000b2a:	4631      	mov	r1, r6
 8000b2c:	2017      	movs	r0, #23
 8000b2e:	f000 fead 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000b32:	2017      	movs	r0, #23
 8000b34:	f000 fee8 	bl	8001908 <HAL_NVIC_EnableIRQ>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b38:	e9cd 6608 	strd	r6, r6, [sp, #32]
 8000b3c:	e9cd 660a 	strd	r6, r6, [sp, #40]	; 0x28
  htim9.Init.Prescaler = 0;
 8000b40:	e9c5 4600 	strd	r4, r6, [r5]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b44:	60ae      	str	r6, [r5, #8]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	612e      	str	r6, [r5, #16]
  htim9.Init.Period = 192;
 8000b48:	23c0      	movs	r3, #192	; 0xc0
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b4a:	2680      	movs	r6, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b4c:	4628      	mov	r0, r5
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b4e:	61ae      	str	r6, [r5, #24]
  htim9.Init.Period = 192;
 8000b50:	60eb      	str	r3, [r5, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000b52:	f001 fac3 	bl	80020dc <HAL_TIM_Base_Init>
 8000b56:	b108      	cbz	r0, 8000b5c <main+0x144>
 8000b58:	b672      	cpsid	i
 8000b5a:	e7fe      	b.n	8000b5a <main+0x142>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b60:	a908      	add	r1, sp, #32
 8000b62:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b64:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000b66:	f001 fb6b 	bl	8002240 <HAL_TIM_ConfigClockSource>
 8000b6a:	bb20      	cbnz	r0, 8000bb6 <main+0x19e>
  hadc1.Instance = ADC1;
 8000b6c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8000c48 <main+0x230>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b70:	4a30      	ldr	r2, [pc, #192]	; (8000c34 <main+0x21c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b72:	f8c8 0008 	str.w	r0, [r8, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7a:	e9c8 2300 	strd	r2, r3, [r8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <main+0x220>)
  hadc1.Init.ScanConvMode = DISABLE;
 8000b80:	f8c8 0010 	str.w	r0, [r8, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b84:	2300      	movs	r3, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b86:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8000b8a:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b8e:	f888 0018 	strb.w	r0, [r8, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b92:	f888 0020 	strb.w	r0, [r8, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	f8c8 000c 	str.w	r0, [r8, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b9a:	f888 0030 	strb.w	r0, [r8, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9e:	e9c8 230a 	strd	r2, r3, [r8, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba2:	4640      	mov	r0, r8
  hadc1.Init.NbrOfConversion = 1;
 8000ba4:	f8c8 701c 	str.w	r7, [r8, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ba8:	f8c8 7014 	str.w	r7, [r8, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bac:	f000 fcf0 	bl	8001590 <HAL_ADC_Init>
 8000bb0:	b118      	cbz	r0, 8000bba <main+0x1a2>
 8000bb2:	b672      	cpsid	i
 8000bb4:	e7fe      	b.n	8000bb4 <main+0x19c>
 8000bb6:	b672      	cpsid	i
 8000bb8:	e7fe      	b.n	8000bb8 <main+0x1a0>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bba:	900a      	str	r0, [sp, #40]	; 0x28
  sConfig.Channel = ADC_CHANNEL_1;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc0:	a908      	add	r1, sp, #32
 8000bc2:	4640      	mov	r0, r8
  sConfig.Channel = ADC_CHANNEL_1;
 8000bc4:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc8:	f000 fd90 	bl	80016ec <HAL_ADC_ConfigChannel>
 8000bcc:	b9a0      	cbnz	r0, 8000bf8 <main+0x1e0>
  htim10.Instance = TIM10;
 8000bce:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8000c4c <main+0x234>
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <main+0x224>)
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	f8c9 0010 	str.w	r0, [r9, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	e9c9 0001 	strd	r0, r0, [r9, #4]
  htim10.Init.Period = 65535;
 8000bdc:	f64f 7aff 	movw	sl, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000be0:	4648      	mov	r0, r9
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000be2:	f8c9 6018 	str.w	r6, [r9, #24]
  htim10.Instance = TIM10;
 8000be6:	f8c9 3000 	str.w	r3, [r9]
  htim10.Init.Period = 65535;
 8000bea:	f8c9 a00c 	str.w	sl, [r9, #12]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000bee:	f001 fa75 	bl	80020dc <HAL_TIM_Base_Init>
 8000bf2:	b118      	cbz	r0, 8000bfc <main+0x1e4>
 8000bf4:	b672      	cpsid	i
 8000bf6:	e7fe      	b.n	8000bf6 <main+0x1de>
 8000bf8:	b672      	cpsid	i
 8000bfa:	e7fe      	b.n	8000bfa <main+0x1e2>
  htim11.Instance = TIM11;
 8000bfc:	4f10      	ldr	r7, [pc, #64]	; (8000c40 <main+0x228>)
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <main+0x22c>)
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c00:	61b8      	str	r0, [r7, #24]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c02:	e9c7 0001 	strd	r0, r0, [r7, #4]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	e9c7 a003 	strd	sl, r0, [r7, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c0a:	4638      	mov	r0, r7
  htim11.Instance = TIM11;
 8000c0c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000c0e:	f001 fa65 	bl	80020dc <HAL_TIM_Base_Init>
 8000c12:	9002      	str	r0, [sp, #8]
 8000c14:	b1e0      	cbz	r0, 8000c50 <main+0x238>
 8000c16:	b672      	cpsid	i
 8000c18:	e7fe      	b.n	8000c18 <main+0x200>
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	200001b0 	.word	0x200001b0
 8000c28:	40014000 	.word	0x40014000
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020400 	.word	0x40020400
 8000c34:	40012000 	.word	0x40012000
 8000c38:	0f000001 	.word	0x0f000001
 8000c3c:	40014400 	.word	0x40014400
 8000c40:	20000168 	.word	0x20000168
 8000c44:	40014800 	.word	0x40014800
 8000c48:	200000d8 	.word	0x200000d8
 8000c4c:	20000120 	.word	0x20000120
	  coin_still_present = 0;
  }

}
static void set_local_osc(float freq){
	TIM9->ARR = (uint16_t)(48e3/freq+1);
 8000c50:	23c1      	movs	r3, #193	; 0xc1
}
static void reset_data(){
	MA_min_val = 4095;
 8000c52:	f8df 8308 	ldr.w	r8, [pc, #776]	; 8000f5c <main+0x544>
	TIM9->ARR = (uint16_t)(48e3/freq+1);
 8000c56:	62e3      	str	r3, [r4, #44]	; 0x2c
	MA_min_val = 4095;
 8000c58:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c5c:	f8c8 3000 	str.w	r3, [r8]
  HAL_TIM_Base_Start_IT(&htim9);
 8000c60:	4628      	mov	r0, r5
	MF_max_val = 0;
 8000c62:	4ba5      	ldr	r3, [pc, #660]	; (8000ef8 <main+0x4e0>)
	EF_min_val = 65535;
 8000c64:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 8000f60 <main+0x548>
	MF_rdy = 0;
 8000c68:	4ea4      	ldr	r6, [pc, #656]	; (8000efc <main+0x4e4>)
	EF_rdy = 0;
 8000c6a:	4da5      	ldr	r5, [pc, #660]	; (8000f00 <main+0x4e8>)
	MF_max_val = 0;
 8000c6c:	9a02      	ldr	r2, [sp, #8]
	ADC1->SR &= ~0x10;
 8000c6e:	4ca5      	ldr	r4, [pc, #660]	; (8000f04 <main+0x4ec>)
	MF_max_val = 0;
 8000c70:	601a      	str	r2, [r3, #0]
	EF_min_val = 65535;
 8000c72:	f8cb a000 	str.w	sl, [fp]
	MF_rdy = 0;
 8000c76:	7032      	strb	r2, [r6, #0]
	EF_rdy = 0;
 8000c78:	702a      	strb	r2, [r5, #0]
	ADC1->SR &= ~0x10;
 8000c7a:	6823      	ldr	r3, [r4, #0]
  MF_mov_avg_index = 0;
 8000c7c:	49a2      	ldr	r1, [pc, #648]	; (8000f08 <main+0x4f0>)
	ADC1->SR &= ~0x10;
 8000c7e:	f023 0310 	bic.w	r3, r3, #16
 8000c82:	6023      	str	r3, [r4, #0]
  MF_mov_avg_index = 0;
 8000c84:	700a      	strb	r2, [r1, #0]
  MA_mov_avg_index = 0;
 8000c86:	49a1      	ldr	r1, [pc, #644]	; (8000f0c <main+0x4f4>)
  EFWeight = EFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8000c88:	4ba1      	ldr	r3, [pc, #644]	; (8000f10 <main+0x4f8>)
  MA_mov_avg_index = 0;
 8000c8a:	700a      	strb	r2, [r1, #0]
  EF_mov_avg_index = 0;
 8000c8c:	49a1      	ldr	r1, [pc, #644]	; (8000f14 <main+0x4fc>)
 8000c8e:	700a      	strb	r2, [r1, #0]
  EFWeight = EFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8000c90:	4aa1      	ldr	r2, [pc, #644]	; (8000f18 <main+0x500>)
 8000c92:	6013      	str	r3, [r2, #0]
  MFWeight = MFreqWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8000c94:	4aa1      	ldr	r2, [pc, #644]	; (8000f1c <main+0x504>)
 8000c96:	6013      	str	r3, [r2, #0]
  MAWeight = MAmplWeight / (EFreqWeight + MFreqWeight + MAmplWeight);
 8000c98:	4aa1      	ldr	r2, [pc, #644]	; (8000f20 <main+0x508>)
 8000c9a:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim9);
 8000c9c:	f001 fa9c 	bl	80021d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8000ca0:	4648      	mov	r0, r9
 8000ca2:	f001 fa99 	bl	80021d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	f001 fa96 	bl	80021d8 <HAL_TIM_Base_Start_IT>
  ADC1->CR2 |= 0x01;
 8000cac:	68a3      	ldr	r3, [r4, #8]
 8000cae:	4f9d      	ldr	r7, [pc, #628]	; (8000f24 <main+0x50c>)
 8000cb0:	f8df 92b0 	ldr.w	r9, [pc, #688]	; 8000f64 <main+0x54c>
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	60a3      	str	r3, [r4, #8]
 8000cba:	4b9b      	ldr	r3, [pc, #620]	; (8000f28 <main+0x510>)
 8000cbc:	9300      	str	r3, [sp, #0]
 8000cbe:	4c9b      	ldr	r4, [pc, #620]	; (8000f2c <main+0x514>)
 8000cc0:	4b9b      	ldr	r3, [pc, #620]	; (8000f30 <main+0x518>)
 8000cc2:	9301      	str	r3, [sp, #4]
	*(index) = *(index) + 1;
	*(index) %= moving_average_size;
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
		sum += array_pointer[sum_index];
	}
	sum /= (float)moving_average_size;
 8000cc4:	eeb4 8a00 	vmov.f32	s16, #64	; 0x3e000000  0.125
  while(!MF_sensor_output_stable && !MA_sensor_output_stable && !EF_sensor_output_stable ){
 8000cc8:	4b9a      	ldr	r3, [pc, #616]	; (8000f34 <main+0x51c>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	f040 814b 	bne.w	8000f68 <main+0x550>
 8000cd2:	4b99      	ldr	r3, [pc, #612]	; (8000f38 <main+0x520>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8146 	bne.w	8000f68 <main+0x550>
 8000cdc:	4b97      	ldr	r3, [pc, #604]	; (8000f3c <main+0x524>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	f003 0aff 	and.w	sl, r3, #255	; 0xff
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f040 813f 	bne.w	8000f68 <main+0x550>
	  if(MF_rdy == 1){
 8000cea:	7832      	ldrb	r2, [r6, #0]
 8000cec:	b2d1      	uxtb	r1, r2
 8000cee:	2a01      	cmp	r2, #1
 8000cf0:	9103      	str	r1, [sp, #12]
 8000cf2:	f000 80a4 	beq.w	8000e3e <main+0x426>
	  if(EF_rdy == 1){
 8000cf6:	782b      	ldrb	r3, [r5, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	9203      	str	r2, [sp, #12]
 8000cfe:	d04d      	beq.n	8000d9c <main+0x384>
	  if(MA_rdy){
 8000d00:	4a80      	ldr	r2, [pc, #512]	; (8000f04 <main+0x4ec>)
 8000d02:	6813      	ldr	r3, [r2, #0]
		  MA_new_val = ADC1->DR;
 8000d04:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000d06:	6023      	str	r3, [r4, #0]
		  if(abs(MA_avg - MA_new_val)/(float)MA_new_val < 0.01) {
 8000d08:	4b8d      	ldr	r3, [pc, #564]	; (8000f40 <main+0x528>)
 8000d0a:	ed93 7a00 	vldr	s14, [r3]
 8000d0e:	edd4 7a00 	vldr	s15, [r4]
 8000d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d1a:	ee17 0a90 	vmov	r0, s15
 8000d1e:	f7ff fbbf 	bl	80004a0 <__aeabi_f2d>
 8000d22:	ec41 0b10 	vmov	d0, r0, r1
 8000d26:	f001 fbf1 	bl	800250c <abs>
 8000d2a:	ee07 0a90 	vmov	s15, r0
 8000d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d32:	edd4 7a00 	vldr	s15, [r4]
 8000d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d3a:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8000d3e:	ee17 0a90 	vmov	r0, s15
 8000d42:	f7ff fbad 	bl	80004a0 <__aeabi_f2d>
 8000d46:	a36a      	add	r3, pc, #424	; (adr r3, 8000ef0 <main+0x4d8>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f7ff fc60 	bl	8000610 <__aeabi_dcmplt>
 8000d50:	b110      	cbz	r0, 8000d58 <main+0x340>
			  MA_sensor_output_stable = 1;
 8000d52:	4a79      	ldr	r2, [pc, #484]	; (8000f38 <main+0x520>)
 8000d54:	2301      	movs	r3, #1
 8000d56:	7013      	strb	r3, [r2, #0]
	array_pointer[*(index)] = new_value;
 8000d58:	4a6c      	ldr	r2, [pc, #432]	; (8000f0c <main+0x4f4>)
	float sum = 0;
 8000d5a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8000f44 <main+0x52c>
	array_pointer[*(index)] = new_value;
 8000d5e:	7813      	ldrb	r3, [r2, #0]
 8000d60:	4611      	mov	r1, r2
	*(index) = *(index) + 1;
 8000d62:	3301      	adds	r3, #1
	array_pointer[*(index)] = new_value;
 8000d64:	7812      	ldrb	r2, [r2, #0]
	*(index) %= moving_average_size;
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	700b      	strb	r3, [r1, #0]
		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 8000d6c:	6823      	ldr	r3, [r4, #0]
	array_pointer[*(index)] = new_value;
 8000d6e:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
 8000d72:	4b6c      	ldr	r3, [pc, #432]	; (8000f24 <main+0x50c>)
 8000d74:	461f      	mov	r7, r3
		sum += array_pointer[sum_index];
 8000d76:	ecf3 7a01 	vldmia	r3!, {s15}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000d7a:	f10a 0a01 	add.w	sl, sl, #1
		sum += array_pointer[sum_index];
 8000d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000d82:	fa5f fa8a 	uxtb.w	sl, sl
 8000d86:	f1ba 0f08 	cmp.w	sl, #8
		sum += array_pointer[sum_index];
 8000d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000d8e:	d1f2      	bne.n	8000d76 <main+0x35e>
	sum /= (float)moving_average_size;
 8000d90:	ee27 7a08 	vmul.f32	s14, s14, s16
		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 8000d94:	4b6a      	ldr	r3, [pc, #424]	; (8000f40 <main+0x528>)
 8000d96:	ed83 7a00 	vstr	s14, [r3]
 8000d9a:	e795      	b.n	8000cc8 <main+0x2b0>
		  EF_new_val = TIM11->CNT;
 8000d9c:	4a6a      	ldr	r2, [pc, #424]	; (8000f48 <main+0x530>)
		  EF_rdy = 0;
 8000d9e:	9902      	ldr	r1, [sp, #8]
 8000da0:	7029      	strb	r1, [r5, #0]
		  EF_new_val = TIM11->CNT;
 8000da2:	486a      	ldr	r0, [pc, #424]	; (8000f4c <main+0x534>)
 8000da4:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000da6:	6003      	str	r3, [r0, #0]
		  TIM11->CNT &= 0x00;
 8000da8:	6a53      	ldr	r3, [r2, #36]	; 0x24
		  if(abs(EF_avg - EF_new_val)/(float)EF_avg < 0.01) {
 8000daa:	4b69      	ldr	r3, [pc, #420]	; (8000f50 <main+0x538>)
		  TIM11->CNT &= 0x00;
 8000dac:	6251      	str	r1, [r2, #36]	; 0x24
		  if(abs(EF_avg - EF_new_val)/(float)EF_avg < 0.01) {
 8000dae:	ed93 7a00 	vldr	s14, [r3]
 8000db2:	edd0 7a00 	vldr	s15, [r0]
 8000db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dbe:	ee17 0a90 	vmov	r0, s15
 8000dc2:	f7ff fb6d 	bl	80004a0 <__aeabi_f2d>
 8000dc6:	ec41 0b10 	vmov	d0, r0, r1
 8000dca:	f001 fb9f 	bl	800250c <abs>
 8000dce:	4b60      	ldr	r3, [pc, #384]	; (8000f50 <main+0x538>)
 8000dd0:	ee07 0a90 	vmov	s15, r0
 8000dd4:	ed93 7a00 	vldr	s14, [r3]
 8000dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ddc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8000de0:	ee17 0a90 	vmov	r0, s15
 8000de4:	f7ff fb5c 	bl	80004a0 <__aeabi_f2d>
 8000de8:	a341      	add	r3, pc, #260	; (adr r3, 8000ef0 <main+0x4d8>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f7ff fc0f 	bl	8000610 <__aeabi_dcmplt>
 8000df2:	b110      	cbz	r0, 8000dfa <main+0x3e2>
			  EF_sensor_output_stable = 1;
 8000df4:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <main+0x524>)
 8000df6:	9a03      	ldr	r2, [sp, #12]
 8000df8:	701a      	strb	r2, [r3, #0]
	array_pointer[*(index)] = new_value;
 8000dfa:	4a46      	ldr	r2, [pc, #280]	; (8000f14 <main+0x4fc>)
	float sum = 0;
 8000dfc:	eddf 7a51 	vldr	s15, [pc, #324]	; 8000f44 <main+0x52c>
	array_pointer[*(index)] = new_value;
 8000e00:	7813      	ldrb	r3, [r2, #0]
 8000e02:	4611      	mov	r1, r2
	*(index) = *(index) + 1;
 8000e04:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 8000e06:	f003 0307 	and.w	r3, r3, #7
	array_pointer[*(index)] = new_value;
 8000e0a:	7812      	ldrb	r2, [r2, #0]
	*(index) %= moving_average_size;
 8000e0c:	700b      	strb	r3, [r1, #0]
		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 8000e0e:	4b4f      	ldr	r3, [pc, #316]	; (8000f4c <main+0x534>)
	array_pointer[*(index)] = new_value;
 8000e10:	9901      	ldr	r1, [sp, #4]
		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 8000e12:	681b      	ldr	r3, [r3, #0]
	array_pointer[*(index)] = new_value;
 8000e14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8000e18:	4a45      	ldr	r2, [pc, #276]	; (8000f30 <main+0x518>)
 8000e1a:	9201      	str	r2, [sp, #4]
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000e1c:	2300      	movs	r3, #0
		sum += array_pointer[sum_index];
 8000e1e:	ecb2 7a01 	vldmia	r2!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000e22:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 8000e24:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 8000e2c:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000e30:	d1f5      	bne.n	8000e1e <main+0x406>
	sum /= (float)moving_average_size;
 8000e32:	ee67 7a88 	vmul.f32	s15, s15, s16
		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 8000e36:	4b46      	ldr	r3, [pc, #280]	; (8000f50 <main+0x538>)
 8000e38:	edc3 7a00 	vstr	s15, [r3]
 8000e3c:	e760      	b.n	8000d00 <main+0x2e8>
		  MF_new_val = TIM10->CNT;
 8000e3e:	4a45      	ldr	r2, [pc, #276]	; (8000f54 <main+0x53c>)
		  MF_rdy = 0;
 8000e40:	7033      	strb	r3, [r6, #0]
		  MF_new_val = TIM10->CNT;
 8000e42:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e44:	f8c9 3000 	str.w	r3, [r9]
	  	  TIM10->CNT &= 0x00; //reset timer counter
 8000e48:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000e4a:	f8c2 a024 	str.w	sl, [r2, #36]	; 0x24
	  	  ADC1->CR2 |= 1 << 30; //start ADC conversion
 8000e4e:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8000e52:	6893      	ldr	r3, [r2, #8]
 8000e54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000e58:	6093      	str	r3, [r2, #8]
		  if(abs(MF_avg - MF_new_val)/(float)MF_avg < 0.01) {
 8000e5a:	4b3f      	ldr	r3, [pc, #252]	; (8000f58 <main+0x540>)
 8000e5c:	ed93 7a00 	vldr	s14, [r3]
 8000e60:	edd9 7a00 	vldr	s15, [r9]
 8000e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e6c:	ee17 0a90 	vmov	r0, s15
 8000e70:	f7ff fb16 	bl	80004a0 <__aeabi_f2d>
 8000e74:	ec41 0b10 	vmov	d0, r0, r1
 8000e78:	f001 fb48 	bl	800250c <abs>
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <main+0x540>)
 8000e7e:	ee07 0a90 	vmov	s15, r0
 8000e82:	ed93 7a00 	vldr	s14, [r3]
 8000e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e8a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8000e8e:	ee17 0a90 	vmov	r0, s15
 8000e92:	f7ff fb05 	bl	80004a0 <__aeabi_f2d>
 8000e96:	a316      	add	r3, pc, #88	; (adr r3, 8000ef0 <main+0x4d8>)
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	f7ff fbb8 	bl	8000610 <__aeabi_dcmplt>
 8000ea0:	b110      	cbz	r0, 8000ea8 <main+0x490>
			  MF_sensor_output_stable = 1;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <main+0x51c>)
 8000ea4:	9a03      	ldr	r2, [sp, #12]
 8000ea6:	701a      	strb	r2, [r3, #0]
	array_pointer[*(index)] = new_value;
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <main+0x4f0>)
	float sum = 0;
 8000eaa:	eddf 7a26 	vldr	s15, [pc, #152]	; 8000f44 <main+0x52c>
	array_pointer[*(index)] = new_value;
 8000eae:	7813      	ldrb	r3, [r2, #0]
 8000eb0:	4611      	mov	r1, r2
	*(index) = *(index) + 1;
 8000eb2:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 8000eb4:	f003 0307 	and.w	r3, r3, #7
	array_pointer[*(index)] = new_value;
 8000eb8:	7812      	ldrb	r2, [r2, #0]
	*(index) %= moving_average_size;
 8000eba:	700b      	strb	r3, [r1, #0]
	array_pointer[*(index)] = new_value;
 8000ebc:	9900      	ldr	r1, [sp, #0]
		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8000ebe:	f8d9 3000 	ldr.w	r3, [r9]
	array_pointer[*(index)] = new_value;
 8000ec2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8000ec6:	4a18      	ldr	r2, [pc, #96]	; (8000f28 <main+0x510>)
 8000ec8:	9200      	str	r2, [sp, #0]
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000eca:	2300      	movs	r3, #0
		sum += array_pointer[sum_index];
 8000ecc:	ecb2 7a01 	vldmia	r2!, {s14}
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000ed0:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 8000ed2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b08      	cmp	r3, #8
		sum += array_pointer[sum_index];
 8000eda:	ee77 7a87 	vadd.f32	s15, s15, s14
	for(sum_index=0;sum_index<moving_average_size;sum_index++){
 8000ede:	d1f5      	bne.n	8000ecc <main+0x4b4>
	sum /= (float)moving_average_size;
 8000ee0:	ee67 7a88 	vmul.f32	s15, s15, s16
		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <main+0x540>)
 8000ee6:	edc3 7a00 	vstr	s15, [r3]
 8000eea:	e704      	b.n	8000cf6 <main+0x2de>
 8000eec:	f3af 8000 	nop.w
 8000ef0:	47ae147b 	.word	0x47ae147b
 8000ef4:	3f847ae1 	.word	0x3f847ae1
 8000ef8:	200000a4 	.word	0x200000a4
 8000efc:	200000d0 	.word	0x200000d0
 8000f00:	20000064 	.word	0x20000064
 8000f04:	40012000 	.word	0x40012000
 8000f08:	200000c8 	.word	0x200000c8
 8000f0c:	20000090 	.word	0x20000090
 8000f10:	3eaaaaab 	.word	0x3eaaaaab
 8000f14:	2000005c 	.word	0x2000005c
 8000f18:	20000034 	.word	0x20000034
 8000f1c:	2000009c 	.word	0x2000009c
 8000f20:	20000068 	.word	0x20000068
 8000f24:	20000070 	.word	0x20000070
 8000f28:	200000a8 	.word	0x200000a8
 8000f2c:	20000094 	.word	0x20000094
 8000f30:	2000003c 	.word	0x2000003c
 8000f34:	200000d1 	.word	0x200000d1
 8000f38:	20000098 	.word	0x20000098
 8000f3c:	20000065 	.word	0x20000065
 8000f40:	2000006c 	.word	0x2000006c
 8000f44:	00000000 	.word	0x00000000
 8000f48:	40014800 	.word	0x40014800
 8000f4c:	20000060 	.word	0x20000060
 8000f50:	20000038 	.word	0x20000038
 8000f54:	40014400 	.word	0x40014400
 8000f58:	200000a0 	.word	0x200000a0
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20000000 	.word	0x20000000
 8000f64:	200000cc 	.word	0x200000cc
	MF_max_val = 0;
 8000f68:	4bac      	ldr	r3, [pc, #688]	; (800121c <main+0x804>)
	ADC1->SR &= ~0x10;
 8000f6a:	4aad      	ldr	r2, [pc, #692]	; (8001220 <main+0x808>)
		sum += array_pointer[sum_index];
 8000f6c:	ed9f 6aad 	vldr	s12, [pc, #692]	; 8001224 <main+0x80c>
 8000f70:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 8001248 <main+0x830>
	MF_max_val = 0;
 8000f74:	2100      	movs	r1, #0
	MA_min_val = 4095;
 8000f76:	f640 7aff 	movw	sl, #4095	; 0xfff
 8000f7a:	f8c8 a000 	str.w	sl, [r8]
	MF_max_val = 0;
 8000f7e:	6019      	str	r1, [r3, #0]
	EF_min_val = 65535;
 8000f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f84:	f8cb 3000 	str.w	r3, [fp]
	MF_rdy = 0;
 8000f88:	7031      	strb	r1, [r6, #0]
	EF_rdy = 0;
 8000f8a:	7029      	strb	r1, [r5, #0]
	ADC1->SR &= ~0x10;
 8000f8c:	6813      	ldr	r3, [r2, #0]
 8000f8e:	f023 0310 	bic.w	r3, r3, #16
 8000f92:	6013      	str	r3, [r2, #0]
	  while(!coin_inserted){
 8000f94:	4ba4      	ldr	r3, [pc, #656]	; (8001228 <main+0x810>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d179      	bne.n	8001090 <main+0x678>
		  if(MF_rdy == 1)
 8000f9c:	f896 e000 	ldrb.w	lr, [r6]
 8000fa0:	f1be 0f01 	cmp.w	lr, #1
 8000fa4:	f000 80e9 	beq.w	800117a <main+0x762>
	  	  if(EF_rdy == 1)
 8000fa8:	782b      	ldrb	r3, [r5, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	f000 8093 	beq.w	80010d6 <main+0x6be>
	array_pointer[*(index)] = new_value;
 8000fb0:	489e      	ldr	r0, [pc, #632]	; (800122c <main+0x814>)
	  	  if(MA_rdy){
 8000fb2:	6813      	ldr	r3, [r2, #0]
	  		  MA_new_val = ADC1->DR;
 8000fb4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8000fb6:	6023      	str	r3, [r4, #0]
	array_pointer[*(index)] = new_value;
 8000fb8:	7803      	ldrb	r3, [r0, #0]
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 8000fba:	f8d4 e000 	ldr.w	lr, [r4]
	array_pointer[*(index)] = new_value;
 8000fbe:	f847 e023 	str.w	lr, [r7, r3, lsl #2]
		sum += array_pointer[sum_index];
 8000fc2:	edd7 7a00 	vldr	s15, [r7]
 8000fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	*(index) = *(index) + 1;
 8000fca:	3301      	adds	r3, #1
		sum += array_pointer[sum_index];
 8000fcc:	ee37 7a86 	vadd.f32	s14, s15, s12
 8000fd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
	*(index) %= moving_average_size;
 8000fd8:	f003 0307 	and.w	r3, r3, #7
		sum += array_pointer[sum_index];
 8000fdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe0:	ed97 7a02 	vldr	s14, [r7, #8]
	*(index) %= moving_average_size;
 8000fe4:	7003      	strb	r3, [r0, #0]
		sum += array_pointer[sum_index];
 8000fe6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	sum /= (float)moving_average_size;
 8000fea:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
		sum += array_pointer[sum_index];
 8000fee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000ff2:	edd7 7a03 	vldr	s15, [r7, #12]
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 8000ff6:	4b8e      	ldr	r3, [pc, #568]	; (8001230 <main+0x818>)
		sum += array_pointer[sum_index];
 8000ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001000:	edd7 7a04 	vldr	s15, [r7, #16]
 8001004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001008:	ee77 7a87 	vadd.f32	s15, s15, s14
 800100c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001010:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001014:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001018:	edd7 7a06 	vldr	s15, [r7, #24]
 800101c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001024:	edd7 7a07 	vldr	s15, [r7, #28]
 8001028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102c:	ee77 7a87 	vadd.f32	s15, s15, s14
	sum /= (float)moving_average_size;
 8001030:	ee67 7aa6 	vmul.f32	s15, s15, s13
	  		  MA_avg = moving_avg(&MA_mov_avg_index, MA_mov_avg, MA_new_val);
 8001034:	edc3 7a00 	vstr	s15, [r3]
 8001038:	e7ac      	b.n	8000f94 <main+0x57c>
		  coin_inserted = 0;
 800103a:	4b7b      	ldr	r3, [pc, #492]	; (8001228 <main+0x810>)
 800103c:	7019      	strb	r1, [r3, #0]
		  if(MF_rdy == 1)
 800103e:	7833      	ldrb	r3, [r6, #0]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d10a      	bne.n	800105a <main+0x642>
	  		  if(MF_new_val > MF_max_val)
 8001044:	4b75      	ldr	r3, [pc, #468]	; (800121c <main+0x804>)
	  		  MF_rdy = 0;
 8001046:	7031      	strb	r1, [r6, #0]
	  		  if(MF_new_val > MF_max_val)
 8001048:	f8d9 e000 	ldr.w	lr, [r9]
 800104c:	4618      	mov	r0, r3
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	459e      	cmp	lr, r3
	  			  MF_max_val = MF_new_val;
 8001052:	bf84      	itt	hi
 8001054:	f8d9 3000 	ldrhi.w	r3, [r9]
 8001058:	6003      	strhi	r3, [r0, #0]
	  	  if(EF_rdy == 1)
 800105a:	782b      	ldrb	r3, [r5, #0]
 800105c:	2b01      	cmp	r3, #1
 800105e:	d10b      	bne.n	8001078 <main+0x660>
	  		  if(EF_new_val < EF_min_val)
 8001060:	4b74      	ldr	r3, [pc, #464]	; (8001234 <main+0x81c>)
	  		  EF_rdy = 0;
 8001062:	7029      	strb	r1, [r5, #0]
	  		  if(EF_new_val < EF_min_val)
 8001064:	f8d3 e000 	ldr.w	lr, [r3]
 8001068:	f8db 3000 	ldr.w	r3, [fp]
 800106c:	459e      	cmp	lr, r3
	  			  EF_min_val = MF_new_val;
 800106e:	bf3c      	itt	cc
 8001070:	f8d9 3000 	ldrcc.w	r3, [r9]
 8001074:	f8cb 3000 	strcc.w	r3, [fp]
	  	  if(MA_rdy){
 8001078:	6813      	ldr	r3, [r2, #0]
	  		  MA_new_val = ADC1->DR;
 800107a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800107c:	6023      	str	r3, [r4, #0]
	  		  if(MA_new_val < MA_min_val){
 800107e:	f8d4 e000 	ldr.w	lr, [r4]
 8001082:	f8d8 3000 	ldr.w	r3, [r8]
 8001086:	459e      	cmp	lr, r3
	  			  MA_min_val = MA_new_val;
 8001088:	bf3c      	itt	cc
 800108a:	6823      	ldrcc	r3, [r4, #0]
 800108c:	f8c8 3000 	strcc.w	r3, [r8]
	  while(coin_still_present){
 8001090:	f89c 3000 	ldrb.w	r3, [ip]
 8001094:	f003 0eff 	and.w	lr, r3, #255	; 0xff
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ce      	bne.n	800103a <main+0x622>
	  DF = MF_max_val - MF_avg;
 800109c:	485f      	ldr	r0, [pc, #380]	; (800121c <main+0x804>)
	  DA = MA_avg - MA_min_val;
 800109e:	4b64      	ldr	r3, [pc, #400]	; (8001230 <main+0x818>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f8d8 3000 	ldr.w	r3, [r8]
	  DF = MF_max_val - MF_avg;
 80010a6:	6803      	ldr	r3, [r0, #0]
 80010a8:	4b63      	ldr	r3, [pc, #396]	; (8001238 <main+0x820>)
 80010aa:	681b      	ldr	r3, [r3, #0]
	  DV = EF_avg - EF_min_val;
 80010ac:	4b63      	ldr	r3, [pc, #396]	; (800123c <main+0x824>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f8db 3000 	ldr.w	r3, [fp]
	MA_min_val = 4095;
 80010b4:	f8c8 a000 	str.w	sl, [r8]
	EF_min_val = 65535;
 80010b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
	MF_max_val = 0;
 80010bc:	f8c0 e000 	str.w	lr, [r0]
	EF_min_val = 65535;
 80010c0:	f8cb 3000 	str.w	r3, [fp]
	MF_rdy = 0;
 80010c4:	f886 e000 	strb.w	lr, [r6]
	EF_rdy = 0;
 80010c8:	f885 e000 	strb.w	lr, [r5]
	ADC1->SR &= ~0x10;
 80010cc:	6813      	ldr	r3, [r2, #0]
 80010ce:	f023 0310 	bic.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	e75e      	b.n	8000f94 <main+0x57c>
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 80010d6:	4857      	ldr	r0, [pc, #348]	; (8001234 <main+0x81c>)
	array_pointer[*(index)] = new_value;
 80010d8:	4b59      	ldr	r3, [pc, #356]	; (8001240 <main+0x828>)
	  		  EF_rdy = 0;
 80010da:	7029      	strb	r1, [r5, #0]
	array_pointer[*(index)] = new_value;
 80010dc:	781b      	ldrb	r3, [r3, #0]
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 80010de:	f8d0 e000 	ldr.w	lr, [r0]
	array_pointer[*(index)] = new_value;
 80010e2:	9801      	ldr	r0, [sp, #4]
 80010e4:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 80010e8:	4b55      	ldr	r3, [pc, #340]	; (8001240 <main+0x828>)
 80010ea:	4618      	mov	r0, r3
 80010ec:	781b      	ldrb	r3, [r3, #0]
	*(index) = *(index) + 1;
 80010ee:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	7003      	strb	r3, [r0, #0]
		sum += array_pointer[sum_index];
 80010f6:	9b01      	ldr	r3, [sp, #4]
 80010f8:	6818      	ldr	r0, [r3, #0]
 80010fa:	ee07 0a90 	vmov	s15, r0
 80010fe:	6858      	ldr	r0, [r3, #4]
 8001100:	eef8 7a67 	vcvt.f32.u32	s15, s15
	sum /= (float)moving_average_size;
 8001104:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
		sum += array_pointer[sum_index];
 8001108:	ee37 7a86 	vadd.f32	s14, s15, s12
 800110c:	ee07 0a90 	vmov	s15, r0
 8001110:	6898      	ldr	r0, [r3, #8]
 8001112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111a:	ee07 0a10 	vmov	s14, r0
 800111e:	68d8      	ldr	r0, [r3, #12]
 8001120:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001124:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001128:	ee07 0a90 	vmov	s15, r0
 800112c:	6918      	ldr	r0, [r3, #16]
 800112e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001132:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001136:	ee07 0a90 	vmov	s15, r0
 800113a:	6958      	ldr	r0, [r3, #20]
 800113c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001144:	ee07 0a10 	vmov	s14, r0
 8001148:	6998      	ldr	r0, [r3, #24]
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	9302      	str	r3, [sp, #8]
 800114e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001156:	ee07 0a90 	vmov	s15, r0
 800115a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 800116a:	4b34      	ldr	r3, [pc, #208]	; (800123c <main+0x824>)
		sum += array_pointer[sum_index];
 800116c:	ee77 7a87 	vadd.f32	s15, s15, s14
	sum /= (float)moving_average_size;
 8001170:	ee67 7aa6 	vmul.f32	s15, s15, s13
	  		  EF_avg = moving_avg(&EF_mov_avg_index, EF_mov_avg, EF_new_val);
 8001174:	edc3 7a00 	vstr	s15, [r3]
 8001178:	e71a      	b.n	8000fb0 <main+0x598>
	  		  MF_rdy = 0;
 800117a:	7033      	strb	r3, [r6, #0]
	array_pointer[*(index)] = new_value;
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <main+0x82c>)
 800117e:	9800      	ldr	r0, [sp, #0]
 8001180:	781b      	ldrb	r3, [r3, #0]
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001182:	f8d9 e000 	ldr.w	lr, [r9]
	array_pointer[*(index)] = new_value;
 8001186:	f840 e023 	str.w	lr, [r0, r3, lsl #2]
 800118a:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <main+0x82c>)
 800118c:	4618      	mov	r0, r3
 800118e:	781b      	ldrb	r3, [r3, #0]
	*(index) = *(index) + 1;
 8001190:	3301      	adds	r3, #1
	*(index) %= moving_average_size;
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	7003      	strb	r3, [r0, #0]
		sum += array_pointer[sum_index];
 8001198:	9b00      	ldr	r3, [sp, #0]
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	ee07 0a90 	vmov	s15, r0
 80011a0:	6858      	ldr	r0, [r3, #4]
 80011a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	sum /= (float)moving_average_size;
 80011a6:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
		sum += array_pointer[sum_index];
 80011aa:	ee37 7a86 	vadd.f32	s14, s15, s12
 80011ae:	ee07 0a90 	vmov	s15, r0
 80011b2:	6898      	ldr	r0, [r3, #8]
 80011b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011bc:	ee07 0a10 	vmov	s14, r0
 80011c0:	68d8      	ldr	r0, [r3, #12]
 80011c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011ca:	ee07 0a90 	vmov	s15, r0
 80011ce:	6918      	ldr	r0, [r3, #16]
 80011d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011d8:	ee07 0a90 	vmov	s15, r0
 80011dc:	6958      	ldr	r0, [r3, #20]
 80011de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011e6:	ee07 0a10 	vmov	s14, r0
 80011ea:	6998      	ldr	r0, [r3, #24]
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80011f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011f8:	ee07 0a90 	vmov	s15, r0
 80011fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001200:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <main+0x820>)
		sum += array_pointer[sum_index];
 800120e:	ee77 7a87 	vadd.f32	s15, s15, s14
	sum /= (float)moving_average_size;
 8001212:	ee67 7aa6 	vmul.f32	s15, s15, s13
	  		  MF_avg = moving_avg(&MF_mov_avg_index, MF_mov_avg, MF_new_val);
 8001216:	edc3 7a00 	vstr	s15, [r3]
 800121a:	e6c5      	b.n	8000fa8 <main+0x590>
 800121c:	200000a4 	.word	0x200000a4
 8001220:	40012000 	.word	0x40012000
 8001224:	00000000 	.word	0x00000000
 8001228:	200000d2 	.word	0x200000d2
 800122c:	20000090 	.word	0x20000090
 8001230:	2000006c 	.word	0x2000006c
 8001234:	20000060 	.word	0x20000060
 8001238:	200000a0 	.word	0x200000a0
 800123c:	20000038 	.word	0x20000038
 8001240:	2000005c 	.word	0x2000005c
 8001244:	200000c8 	.word	0x200000c8
 8001248:	200000d3 	.word	0x200000d3

0800124c <HAL_TIM_PeriodElapsedCallback>:
  if (htim == &htim9)
 800124c:	4b03      	ldr	r3, [pc, #12]	; (800125c <HAL_TIM_PeriodElapsedCallback+0x10>)
 800124e:	4283      	cmp	r3, r0
 8001250:	d000      	beq.n	8001254 <HAL_TIM_PeriodElapsedCallback+0x8>
}
 8001252:	4770      	bx	lr
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001256:	2104      	movs	r1, #4
 8001258:	f000 bc74 	b.w	8001b44 <HAL_GPIO_TogglePin>
 800125c:	200001b0 	.word	0x200001b0
 8001260:	40021000 	.word	0x40021000

08001264 <HAL_GPIO_EXTI_Callback>:
  if(GPIO_Pin == GPIO_PIN_6) {
 8001264:	2840      	cmp	r0, #64	; 0x40
 8001266:	d016      	beq.n	8001296 <HAL_GPIO_EXTI_Callback+0x32>
  if(GPIO_Pin == GPIO_PIN_4) {
 8001268:	2810      	cmp	r0, #16
 800126a:	d103      	bne.n	8001274 <HAL_GPIO_EXTI_Callback+0x10>
	  EF_rdy = 1;
 800126c:	4b13      	ldr	r3, [pc, #76]	; (80012bc <HAL_GPIO_EXTI_Callback+0x58>)
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
 8001272:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_0){
 8001274:	2801      	cmp	r0, #1
 8001276:	d112      	bne.n	800129e <HAL_GPIO_EXTI_Callback+0x3a>
	  MA_min_val = 4095;
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_GPIO_EXTI_Callback+0x5c>)
	  MF_max_val = 0;
 800127a:	4912      	ldr	r1, [pc, #72]	; (80012c4 <HAL_GPIO_EXTI_Callback+0x60>)
	  EF_min_val = 65535;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_GPIO_EXTI_Callback+0x64>)
{
 800127e:	b410      	push	{r4}
	  MA_min_val = 4095;
 8001280:	f640 74ff 	movw	r4, #4095	; 0xfff
 8001284:	6014      	str	r4, [r2, #0]
	  MF_max_val = 0;
 8001286:	2000      	movs	r0, #0
	  EF_min_val = 65535;
 8001288:	f64f 72ff 	movw	r2, #65535	; 0xffff
	  MF_max_val = 0;
 800128c:	6008      	str	r0, [r1, #0]
}
 800128e:	f85d 4b04 	ldr.w	r4, [sp], #4
	  EF_min_val = 65535;
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	4770      	bx	lr
	  MF_rdy = 1;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_GPIO_EXTI_Callback+0x68>)
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_1){
 800129e:	2802      	cmp	r0, #2
 80012a0:	d105      	bne.n	80012ae <HAL_GPIO_EXTI_Callback+0x4a>
  	  coin_inserted = 1;
 80012a2:	490b      	ldr	r1, [pc, #44]	; (80012d0 <HAL_GPIO_EXTI_Callback+0x6c>)
  	  coin_still_present = 1;
 80012a4:	4a0b      	ldr	r2, [pc, #44]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x70>)
  	  coin_inserted = 1;
 80012a6:	2301      	movs	r3, #1
 80012a8:	700b      	strb	r3, [r1, #0]
  	  coin_still_present = 1;
 80012aa:	7013      	strb	r3, [r2, #0]
 80012ac:	4770      	bx	lr
  if(GPIO_Pin == GPIO_PIN_2){
 80012ae:	2804      	cmp	r0, #4
 80012b0:	d103      	bne.n	80012ba <HAL_GPIO_EXTI_Callback+0x56>
	  coin_still_present = 0;
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_GPIO_EXTI_Callback+0x70>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	4770      	bx	lr
 80012ba:	4770      	bx	lr
 80012bc:	20000064 	.word	0x20000064
 80012c0:	20000004 	.word	0x20000004
 80012c4:	200000a4 	.word	0x200000a4
 80012c8:	20000000 	.word	0x20000000
 80012cc:	200000d0 	.word	0x200000d0
 80012d0:	200000d2 	.word	0x200000d2
 80012d4:	200000d3 	.word	0x200000d3

080012d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <HAL_MspInit+0x34>)
 80012dc:	2100      	movs	r1, #0
 80012de:	9100      	str	r1, [sp, #0]
 80012e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012e6:	645a      	str	r2, [r3, #68]	; 0x44
 80012e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	9101      	str	r1, [sp, #4]
 80012f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001306:	b002      	add	sp, #8
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001310:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001312:	4a19      	ldr	r2, [pc, #100]	; (8001378 <HAL_ADC_MspInit+0x68>)
 8001314:	6801      	ldr	r1, [r0, #0]
{
 8001316:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 800131a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001320:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001324:	9306      	str	r3, [sp, #24]
  if(hadc->Instance==ADC1)
 8001326:	d002      	beq.n	800132e <HAL_ADC_MspInit+0x1e>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001328:	b009      	add	sp, #36	; 0x24
 800132a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 800132e:	f502 328c 	add.w	r2, r2, #71680	; 0x11800
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8001336:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800133a:	6450      	str	r0, [r2, #68]	; 0x44
 800133c:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800133e:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8001342:	9000      	str	r0, [sp, #0]
 8001344:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001346:	9301      	str	r3, [sp, #4]
 8001348:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	480c      	ldr	r0, [pc, #48]	; (800137c <HAL_ADC_MspInit+0x6c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134c:	f043 0301 	orr.w	r3, r3, #1
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001354:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8001370 <HAL_ADC_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001360:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001364:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001366:	f000 faf7 	bl	8001958 <HAL_GPIO_Init>
}
 800136a:	b009      	add	sp, #36	; 0x24
 800136c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001370:	00000002 	.word	0x00000002
 8001374:	00000003 	.word	0x00000003
 8001378:	40012000 	.word	0x40012000
 800137c:	40020000 	.word	0x40020000

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b500      	push	{lr}
  if(htim_base->Instance==TIM9)
 8001382:	4a24      	ldr	r2, [pc, #144]	; (8001414 <HAL_TIM_Base_MspInit+0x94>)
 8001384:	6803      	ldr	r3, [r0, #0]
 8001386:	4293      	cmp	r3, r2
{
 8001388:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM9)
 800138a:	d017      	beq.n	80013bc <HAL_TIM_Base_MspInit+0x3c>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM10)
 800138c:	4a22      	ldr	r2, [pc, #136]	; (8001418 <HAL_TIM_Base_MspInit+0x98>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d02a      	beq.n	80013e8 <HAL_TIM_Base_MspInit+0x68>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8001392:	4a22      	ldr	r2, [pc, #136]	; (800141c <HAL_TIM_Base_MspInit+0x9c>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d002      	beq.n	800139e <HAL_TIM_Base_MspInit+0x1e>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001398:	b005      	add	sp, #20
 800139a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM11_CLK_ENABLE();
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_TIM_Base_MspInit+0xa0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	9203      	str	r2, [sp, #12]
 80013a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013aa:	645a      	str	r2, [r3, #68]	; 0x44
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b2:	9303      	str	r3, [sp, #12]
 80013b4:	9b03      	ldr	r3, [sp, #12]
}
 80013b6:	b005      	add	sp, #20
 80013b8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013bc:	2200      	movs	r2, #0
 80013be:	4b18      	ldr	r3, [pc, #96]	; (8001420 <HAL_TIM_Base_MspInit+0xa0>)
 80013c0:	9201      	str	r2, [sp, #4]
 80013c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80013c4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80013c8:	6459      	str	r1, [r3, #68]	; 0x44
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013d0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80013d2:	2018      	movs	r0, #24
 80013d4:	4611      	mov	r1, r2
    __HAL_RCC_TIM9_CLK_ENABLE();
 80013d6:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80013d8:	f000 fa58 	bl	800188c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80013dc:	2018      	movs	r0, #24
}
 80013de:	b005      	add	sp, #20
 80013e0:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80013e4:	f000 ba90 	b.w	8001908 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013e8:	2200      	movs	r2, #0
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_TIM_Base_MspInit+0xa0>)
 80013ec:	9202      	str	r2, [sp, #8]
 80013ee:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80013f0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80013f4:	6459      	str	r1, [r3, #68]	; 0x44
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80013fe:	2019      	movs	r0, #25
 8001400:	4611      	mov	r1, r2
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001402:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001404:	f000 fa42 	bl	800188c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001408:	2019      	movs	r0, #25
}
 800140a:	b005      	add	sp, #20
 800140c:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001410:	f000 ba7a 	b.w	8001908 <HAL_NVIC_EnableIRQ>
 8001414:	40014000 	.word	0x40014000
 8001418:	40014400 	.word	0x40014400
 800141c:	40014800 	.word	0x40014800
 8001420:	40023800 	.word	0x40023800

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	e7fe      	b.n	8001424 <NMI_Handler>
 8001426:	bf00      	nop

08001428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001428:	e7fe      	b.n	8001428 <HardFault_Handler>
 800142a:	bf00      	nop

0800142c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800142c:	e7fe      	b.n	800142c <MemManage_Handler>
 800142e:	bf00      	nop

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	e7fe      	b.n	8001430 <BusFault_Handler>
 8001432:	bf00      	nop

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler>
 8001436:	bf00      	nop

08001438 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop

0800143c <DebugMon_Handler>:
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <PendSV_Handler>:
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop

08001444 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 b892 	b.w	800156c <HAL_IncTick>

08001448 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001448:	2001      	movs	r0, #1
 800144a:	f000 bb85 	b.w	8001b58 <HAL_GPIO_EXTI_IRQHandler>
 800144e:	bf00      	nop

08001450 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001450:	2002      	movs	r0, #2
 8001452:	f000 bb81 	b.w	8001b58 <HAL_GPIO_EXTI_IRQHandler>
 8001456:	bf00      	nop

08001458 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001458:	2004      	movs	r0, #4
 800145a:	f000 bb7d 	b.w	8001b58 <HAL_GPIO_EXTI_IRQHandler>
 800145e:	bf00      	nop

08001460 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001460:	2010      	movs	r0, #16
 8001462:	f000 bb79 	b.w	8001b58 <HAL_GPIO_EXTI_IRQHandler>
 8001466:	bf00      	nop

08001468 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001468:	2040      	movs	r0, #64	; 0x40
 800146a:	f000 bb75 	b.w	8001b58 <HAL_GPIO_EXTI_IRQHandler>
 800146e:	bf00      	nop

08001470 <TIM1_BRK_TIM9_IRQHandler>:
void TIM1_BRK_TIM9_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001470:	4801      	ldr	r0, [pc, #4]	; (8001478 <TIM1_BRK_TIM9_IRQHandler+0x8>)
 8001472:	f000 bf9d 	b.w	80023b0 <HAL_TIM_IRQHandler>
 8001476:	bf00      	nop
 8001478:	200001b0 	.word	0x200001b0

0800147c <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800147c:	4801      	ldr	r0, [pc, #4]	; (8001484 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800147e:	f000 bf97 	b.w	80023b0 <HAL_TIM_IRQHandler>
 8001482:	bf00      	nop
 8001484:	20000120 	.word	0x20000120

08001488 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <SystemInit+0x10>)
 800148a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800148e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001492:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <Reset_Handler>:
 800149c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d4 <LoopFillZerobss+0x12>
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopFillZerobss+0x16>)
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <LoopFillZerobss+0x1a>)
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <LoopFillZerobss+0x1e>)
 80014a6:	2300      	movs	r3, #0
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:
 80014aa:	58d4      	ldr	r4, [r2, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:
 80014b0:	18c4      	adds	r4, r0, r3
 80014b2:	428c      	cmp	r4, r1
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopFillZerobss+0x22>)
 80014b8:	4c0b      	ldr	r4, [pc, #44]	; (80014e8 <LoopFillZerobss+0x26>)
 80014ba:	2300      	movs	r3, #0
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:
 80014c2:	42a2      	cmp	r2, r4
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>
 80014c6:	f7ff ffdf 	bl	8001488 <SystemInit>
 80014ca:	f001 f823 	bl	8002514 <__libc_init_array>
 80014ce:	f7ff faa3 	bl	8000a18 <main>
 80014d2:	4770      	bx	lr
 80014d4:	20020000 	.word	0x20020000
 80014d8:	20000000 	.word	0x20000000
 80014dc:	20000014 	.word	0x20000014
 80014e0:	08002594 	.word	0x08002594
 80014e4:	20000018 	.word	0x20000018
 80014e8:	200001fc 	.word	0x200001fc

080014ec <ADC_IRQHandler>:
 80014ec:	e7fe      	b.n	80014ec <ADC_IRQHandler>
	...

080014f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_InitTick+0x3c>)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_InitTick+0x40>)
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
{
 80014fa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001500:	fbb0 f0f2 	udiv	r0, r0, r2
 8001504:	fbb3 f0f0 	udiv	r0, r3, r0
 8001508:	f000 fa0c 	bl	8001924 <HAL_SYSTICK_Config>
 800150c:	b908      	cbnz	r0, 8001512 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150e:	2d0f      	cmp	r5, #15
 8001510:	d901      	bls.n	8001516 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001512:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001514:	bd38      	pop	{r3, r4, r5, pc}
 8001516:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001518:	4602      	mov	r2, r0
 800151a:	4629      	mov	r1, r5
 800151c:	f04f 30ff 	mov.w	r0, #4294967295
 8001520:	f000 f9b4 	bl	800188c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_InitTick+0x44>)
 8001526:	4620      	mov	r0, r4
 8001528:	601d      	str	r5, [r3, #0]
}
 800152a:	bd38      	pop	{r3, r4, r5, pc}
 800152c:	2000000c 	.word	0x2000000c
 8001530:	20000008 	.word	0x20000008
 8001534:	20000010 	.word	0x20000010

08001538 <HAL_Init>:
{
 8001538:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <HAL_Init+0x30>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800154a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001552:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001554:	2003      	movs	r0, #3
 8001556:	f000 f987 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800155a:	200f      	movs	r0, #15
 800155c:	f7ff ffc8 	bl	80014f0 <HAL_InitTick>
  HAL_MspInit();
 8001560:	f7ff feba 	bl	80012d8 <HAL_MspInit>
}
 8001564:	2000      	movs	r0, #0
 8001566:	bd08      	pop	{r3, pc}
 8001568:	40023c00 	.word	0x40023c00

0800156c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800156c:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_IncTick+0x10>)
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <HAL_IncTick+0x14>)
 8001570:	6811      	ldr	r1, [r2, #0]
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	440b      	add	r3, r1
 8001576:	6013      	str	r3, [r2, #0]
}
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200001f8 	.word	0x200001f8
 8001580:	2000000c 	.word	0x2000000c

08001584 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001584:	4b01      	ldr	r3, [pc, #4]	; (800158c <HAL_GetTick+0x8>)
 8001586:	6818      	ldr	r0, [r3, #0]
}
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	200001f8 	.word	0x200001f8

08001590 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001590:	2800      	cmp	r0, #0
 8001592:	f000 809f 	beq.w	80016d4 <HAL_ADC_Init+0x144>
{
 8001596:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001598:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800159a:	4604      	mov	r4, r0
 800159c:	b13d      	cbz	r5, 80015ae <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800159e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015a0:	06db      	lsls	r3, r3, #27
 80015a2:	d50c      	bpl.n	80015be <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80015a4:	2300      	movs	r3, #0
 80015a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80015aa:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80015ac:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80015ae:	f7ff feaf 	bl	8001310 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80015b6:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ba:	06db      	lsls	r3, r3, #27
 80015bc:	d4f2      	bmi.n	80015a4 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 80015be:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015c0:	4a48      	ldr	r2, [pc, #288]	; (80016e4 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 80015c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015c6:	f023 0302 	bic.w	r3, r3, #2
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015d0:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015d2:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015d4:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80015d8:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015da:	6851      	ldr	r1, [r2, #4]
 80015dc:	6860      	ldr	r0, [r4, #4]
 80015de:	4301      	orrs	r1, r0
 80015e0:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015e2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015e4:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015e6:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80015f4:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015f6:	6859      	ldr	r1, [r3, #4]
 80015f8:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80015fc:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015fe:	685a      	ldr	r2, [r3, #4]
 8001600:	4302      	orrs	r2, r0
 8001602:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001604:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001606:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001608:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800160c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800160e:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001610:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001612:	4302      	orrs	r2, r0
 8001614:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001616:	4a34      	ldr	r2, [pc, #208]	; (80016e8 <HAL_ADC_Init+0x158>)
 8001618:	4291      	cmp	r1, r2
 800161a:	d052      	beq.n	80016c2 <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800161c:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800161e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001620:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8001624:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	4311      	orrs	r1, r2
 800162a:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800162c:	6899      	ldr	r1, [r3, #8]
 800162e:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001632:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001634:	689a      	ldr	r2, [r3, #8]
 8001636:	432a      	orrs	r2, r5
 8001638:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	f022 0202 	bic.w	r2, r2, #2
 8001640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	7e21      	ldrb	r1, [r4, #24]
 8001646:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800164a:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800164c:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001650:	2a00      	cmp	r2, #0
 8001652:	d041      	beq.n	80016d8 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001654:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001656:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001658:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800165c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800165e:	6858      	ldr	r0, [r3, #4]
 8001660:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8001664:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001666:	1e51      	subs	r1, r2, #1
 8001668:	685a      	ldr	r2, [r3, #4]
 800166a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800166e:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001672:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001674:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001676:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800167c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167e:	3901      	subs	r1, #1
 8001680:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001684:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001686:	6899      	ldr	r1, [r3, #8]
 8001688:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 800168c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800168e:	6899      	ldr	r1, [r3, #8]
 8001690:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8001694:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8001698:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800169a:	6899      	ldr	r1, [r3, #8]
 800169c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80016a0:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a2:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80016a4:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016a6:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 80016aa:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80016ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016b0:	f023 0303 	bic.w	r3, r3, #3
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80016ba:	2300      	movs	r3, #0
 80016bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80016c0:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	e7b2      	b.n	800163a <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80016d4:	2001      	movs	r0, #1
}
 80016d6:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016d8:	685a      	ldr	r2, [r3, #4]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	605a      	str	r2, [r3, #4]
 80016e0:	e7c6      	b.n	8001670 <HAL_ADC_Init+0xe0>
 80016e2:	bf00      	nop
 80016e4:	40012300 	.word	0x40012300
 80016e8:	0f000001 	.word	0x0f000001

080016ec <HAL_ADC_ConfigChannel>:
{
 80016ec:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 80016ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80016f2:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80016f4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80016f6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80016f8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80016fa:	f000 809b 	beq.w	8001834 <HAL_ADC_ConfigChannel+0x148>
 80016fe:	2301      	movs	r3, #1
 8001700:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001704:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001706:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001708:	2c09      	cmp	r4, #9
 800170a:	d82d      	bhi.n	8001768 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800170c:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800170e:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001710:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8001714:	f04f 0c07 	mov.w	ip, #7
 8001718:	fa0c fc0e 	lsl.w	ip, ip, lr
 800171c:	ea25 050c 	bic.w	r5, r5, ip
 8001720:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001722:	691d      	ldr	r5, [r3, #16]
 8001724:	fa02 f20e 	lsl.w	r2, r2, lr
 8001728:	432a      	orrs	r2, r5
 800172a:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 800172c:	684a      	ldr	r2, [r1, #4]
 800172e:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001730:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8001732:	d82f      	bhi.n	8001794 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001734:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001738:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800173a:	3a05      	subs	r2, #5
 800173c:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001740:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001744:	fa0e f202 	lsl.w	r2, lr, r2
 8001748:	ea21 0202 	bic.w	r2, r1, r2
 800174c:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800174e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001750:	ea4c 0202 	orr.w	r2, ip, r2
 8001754:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001756:	4a3f      	ldr	r2, [pc, #252]	; (8001854 <HAL_ADC_ConfigChannel+0x168>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d030      	beq.n	80017be <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 800175c:	2300      	movs	r3, #0
 800175e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001762:	4618      	mov	r0, r3
}
 8001764:	b003      	add	sp, #12
 8001766:	bd30      	pop	{r4, r5, pc}
 8001768:	fa1f fc84 	uxth.w	ip, r4
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800176c:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8001770:	68dd      	ldr	r5, [r3, #12]
 8001772:	f1a2 0e1e 	sub.w	lr, r2, #30
 8001776:	2207      	movs	r2, #7
 8001778:	fa02 f20e 	lsl.w	r2, r2, lr
 800177c:	ea25 0202 	bic.w	r2, r5, r2
 8001780:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001782:	688a      	ldr	r2, [r1, #8]
 8001784:	68dd      	ldr	r5, [r3, #12]
 8001786:	fa02 f20e 	lsl.w	r2, r2, lr
 800178a:	432a      	orrs	r2, r5
 800178c:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800178e:	684a      	ldr	r2, [r1, #4]
 8001790:	2a06      	cmp	r2, #6
 8001792:	d9cf      	bls.n	8001734 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8001794:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001796:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 800179a:	d832      	bhi.n	8001802 <HAL_ADC_ConfigChannel+0x116>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800179c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179e:	3a23      	subs	r2, #35	; 0x23
 80017a0:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017a2:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017a6:	fa05 f202 	lsl.w	r2, r5, r2
 80017aa:	ea21 0202 	bic.w	r2, r1, r2
 80017ae:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017b2:	ea4c 0202 	orr.w	r2, ip, r2
 80017b6:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017b8:	4a26      	ldr	r2, [pc, #152]	; (8001854 <HAL_ADC_ConfigChannel+0x168>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d1ce      	bne.n	800175c <HAL_ADC_ConfigChannel+0x70>
 80017be:	2c12      	cmp	r4, #18
 80017c0:	d02e      	beq.n	8001820 <HAL_ADC_ConfigChannel+0x134>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <HAL_ADC_ConfigChannel+0x16c>)
 80017c4:	429c      	cmp	r4, r3
 80017c6:	d138      	bne.n	800183a <HAL_ADC_ConfigChannel+0x14e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017c8:	4a24      	ldr	r2, [pc, #144]	; (800185c <HAL_ADC_ConfigChannel+0x170>)
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_ADC_ConfigChannel+0x174>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017cc:	6851      	ldr	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017ce:	4c25      	ldr	r4, [pc, #148]	; (8001864 <HAL_ADC_ConfigChannel+0x178>)
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80017d0:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80017d4:	6051      	str	r1, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017d6:	6851      	ldr	r1, [r2, #4]
 80017d8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80017dc:	6051      	str	r1, [r2, #4]
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fba4 2303 	umull	r2, r3, r4, r3
 80017e4:	0c9b      	lsrs	r3, r3, #18
 80017e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80017ee:	9b01      	ldr	r3, [sp, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0b3      	beq.n	800175c <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80017f4:	9b01      	ldr	r3, [sp, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80017fa:	9b01      	ldr	r3, [sp, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <HAL_ADC_ConfigChannel+0x108>
 8001800:	e7ac      	b.n	800175c <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001802:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001804:	3a41      	subs	r2, #65	; 0x41
 8001806:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001808:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800180c:	fa05 f202 	lsl.w	r2, r5, r2
 8001810:	ea21 0202 	bic.w	r2, r1, r2
 8001814:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001818:	ea4c 0202 	orr.w	r2, ip, r2
 800181c:	62da      	str	r2, [r3, #44]	; 0x2c
 800181e:	e79a      	b.n	8001756 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <HAL_ADC_ConfigChannel+0x170>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001828:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	e793      	b.n	800175c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8001834:	2002      	movs	r0, #2
}
 8001836:	b003      	add	sp, #12
 8001838:	bd30      	pop	{r4, r5, pc}
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800183a:	2c11      	cmp	r4, #17
 800183c:	d18e      	bne.n	800175c <HAL_ADC_ConfigChannel+0x70>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <HAL_ADC_ConfigChannel+0x170>)
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001846:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	e784      	b.n	800175c <HAL_ADC_ConfigChannel+0x70>
 8001852:	bf00      	nop
 8001854:	40012000 	.word	0x40012000
 8001858:	10000012 	.word	0x10000012
 800185c:	40012300 	.word	0x40012300
 8001860:	20000008 	.word	0x20000008
 8001864:	431bde83 	.word	0x431bde83

08001868 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800186a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800186c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001872:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001882:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_NVIC_SetPriority+0x74>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001894:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001896:	f1c3 0e07 	rsb	lr, r3, #7
 800189a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a2:	bf28      	it	cs
 80018a4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a8:	f1bc 0f06 	cmp.w	ip, #6
 80018ac:	d91b      	bls.n	80018e6 <HAL_NVIC_SetPriority+0x5a>
 80018ae:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 3cff 	mov.w	ip, #4294967295
 80018b4:	fa0c fc03 	lsl.w	ip, ip, r3
 80018b8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 3cff 	mov.w	ip, #4294967295
 80018c0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80018c4:	ea21 010c 	bic.w	r1, r1, ip
 80018c8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018ca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80018d0:	db0c      	blt.n	80018ec <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018d6:	0109      	lsls	r1, r1, #4
 80018d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018dc:	b2c9      	uxtb	r1, r1
 80018de:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80018e6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e8:	4613      	mov	r3, r2
 80018ea:	e7e7      	b.n	80018bc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_NVIC_SetPriority+0x78>)
 80018ee:	f000 000f 	and.w	r0, r0, #15
 80018f2:	0109      	lsls	r1, r1, #4
 80018f4:	4403      	add	r3, r0
 80018f6:	b2c9      	uxtb	r1, r1
 80018f8:	7619      	strb	r1, [r3, #24]
 80018fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00
 8001904:	e000ecfc 	.word	0xe000ecfc

08001908 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001908:	2800      	cmp	r0, #0
 800190a:	db08      	blt.n	800191e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190c:	0941      	lsrs	r1, r0, #5
 800190e:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_NVIC_EnableIRQ+0x18>)
 8001910:	f000 001f 	and.w	r0, r0, #31
 8001914:	2301      	movs	r3, #1
 8001916:	fa03 f000 	lsl.w	r0, r3, r0
 800191a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100

08001924 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	3801      	subs	r0, #1
 8001926:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800192a:	d210      	bcs.n	800194e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800192c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800192e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	4c08      	ldr	r4, [pc, #32]	; (8001954 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001934:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800193a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800193e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001940:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001942:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8001946:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	6119      	str	r1, [r3, #16]
 800194c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800194e:	2001      	movs	r0, #1
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195c:	2200      	movs	r2, #0
 800195e:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001960:	4e70      	ldr	r6, [pc, #448]	; (8001b24 <HAL_GPIO_Init+0x1cc>)
{
 8001962:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001964:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8001966:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4689      	mov	r9, r1
 800196c:	e004      	b.n	8001978 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	3301      	adds	r3, #1
 8001970:	2b10      	cmp	r3, #16
 8001972:	f102 0202 	add.w	r2, r2, #2
 8001976:	d078      	beq.n	8001a6a <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8001978:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197c:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8001980:	43a1      	bics	r1, r4
 8001982:	d1f4      	bne.n	800196e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001984:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8001988:	f00c 0103 	and.w	r1, ip, #3
 800198c:	1e4d      	subs	r5, r1, #1
 800198e:	2d01      	cmp	r5, #1
 8001990:	d96e      	bls.n	8001a70 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001992:	2903      	cmp	r1, #3
 8001994:	f040 80ae 	bne.w	8001af4 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001998:	4091      	lsls	r1, r2
 800199a:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 800199c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800199e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a0:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a2:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 80019a6:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a8:	d0e1      	beq.n	800196e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	4d5f      	ldr	r5, [pc, #380]	; (8001b28 <HAL_GPIO_Init+0x1d0>)
 80019ac:	2100      	movs	r1, #0
 80019ae:	9103      	str	r1, [sp, #12]
 80019b0:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80019b2:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80019b6:	6469      	str	r1, [r5, #68]	; 0x44
 80019b8:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80019ba:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80019be:	9103      	str	r1, [sp, #12]
 80019c0:	9903      	ldr	r1, [sp, #12]
 80019c2:	f023 0103 	bic.w	r1, r3, #3
 80019c6:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80019ca:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019ce:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d6:	00bf      	lsls	r7, r7, #2
 80019d8:	250f      	movs	r5, #15
 80019da:	40bd      	lsls	r5, r7
 80019dc:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e0:	4d52      	ldr	r5, [pc, #328]	; (8001b2c <HAL_GPIO_Init+0x1d4>)
 80019e2:	42a8      	cmp	r0, r5
 80019e4:	d017      	beq.n	8001a16 <HAL_GPIO_Init+0xbe>
 80019e6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ea:	42a8      	cmp	r0, r5
 80019ec:	f000 8086 	beq.w	8001afc <HAL_GPIO_Init+0x1a4>
 80019f0:	4d4f      	ldr	r5, [pc, #316]	; (8001b30 <HAL_GPIO_Init+0x1d8>)
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	f000 8087 	beq.w	8001b06 <HAL_GPIO_Init+0x1ae>
 80019f8:	4d4e      	ldr	r5, [pc, #312]	; (8001b34 <HAL_GPIO_Init+0x1dc>)
 80019fa:	42a8      	cmp	r0, r5
 80019fc:	f000 808a 	beq.w	8001b14 <HAL_GPIO_Init+0x1bc>
 8001a00:	4d4d      	ldr	r5, [pc, #308]	; (8001b38 <HAL_GPIO_Init+0x1e0>)
 8001a02:	42a8      	cmp	r0, r5
 8001a04:	bf0c      	ite	eq
 8001a06:	f04f 0e04 	moveq.w	lr, #4
 8001a0a:	f04f 0e07 	movne.w	lr, #7
 8001a0e:	fa0e f707 	lsl.w	r7, lr, r7
 8001a12:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a16:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8001a1a:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a20:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001a24:	bf0c      	ite	eq
 8001a26:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001a28:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8001a2c:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8001a2e:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a30:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8001a34:	bf0c      	ite	eq
 8001a36:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a38:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8001a3c:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8001a3e:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a40:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001a44:	bf0c      	ite	eq
 8001a46:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001a48:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8001a4c:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a4e:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a50:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a54:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8001a58:	bf0c      	ite	eq
 8001a5a:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8001a5c:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a60:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8001a62:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a64:	f102 0202 	add.w	r2, r2, #2
 8001a68:	d186      	bne.n	8001978 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a6a:	b005      	add	sp, #20
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a70:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8001a74:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a76:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7a:	2503      	movs	r5, #3
 8001a7c:	fa05 fe02 	lsl.w	lr, r5, r2
 8001a80:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a84:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8001a88:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a8a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a8c:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a90:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a94:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8001a98:	409f      	lsls	r7, r3
 8001a9a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001a9e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001aa0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aa2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001aaa:	4097      	lsls	r7, r2
 8001aac:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab0:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8001ab2:	60c7      	str	r7, [r0, #12]
 8001ab4:	fa01 f102 	lsl.w	r1, r1, r2
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab8:	f47f af70 	bne.w	800199c <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8001abc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8001ac0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac4:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001ac8:	f8de 7020 	ldr.w	r7, [lr, #32]
 8001acc:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ace:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ad2:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad6:	fa07 f708 	lsl.w	r7, r7, r8
 8001ada:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001adc:	270f      	movs	r7, #15
 8001ade:	fa07 f808 	lsl.w	r8, r7, r8
 8001ae2:	9f00      	ldr	r7, [sp, #0]
 8001ae4:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ae8:	9f01      	ldr	r7, [sp, #4]
 8001aea:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8001aee:	f8ce 7020 	str.w	r7, [lr, #32]
 8001af2:	e753      	b.n	800199c <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001af4:	2503      	movs	r5, #3
 8001af6:	4095      	lsls	r5, r2
 8001af8:	43ed      	mvns	r5, r5
 8001afa:	e7d1      	b.n	8001aa0 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afc:	fa0a f707 	lsl.w	r7, sl, r7
 8001b00:	ea48 0807 	orr.w	r8, r8, r7
 8001b04:	e787      	b.n	8001a16 <HAL_GPIO_Init+0xbe>
 8001b06:	f04f 0e02 	mov.w	lr, #2
 8001b0a:	fa0e f707 	lsl.w	r7, lr, r7
 8001b0e:	ea48 0807 	orr.w	r8, r8, r7
 8001b12:	e780      	b.n	8001a16 <HAL_GPIO_Init+0xbe>
 8001b14:	f04f 0e03 	mov.w	lr, #3
 8001b18:	fa0e f707 	lsl.w	r7, lr, r7
 8001b1c:	ea48 0807 	orr.w	r8, r8, r7
 8001b20:	e779      	b.n	8001a16 <HAL_GPIO_Init+0xbe>
 8001b22:	bf00      	nop
 8001b24:	40013c00 	.word	0x40013c00
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40020c00 	.word	0x40020c00
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b3c:	b902      	cbnz	r2, 8001b40 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b3e:	0409      	lsls	r1, r1, #16
 8001b40:	6181      	str	r1, [r0, #24]
  }
}
 8001b42:	4770      	bx	lr

08001b44 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b44:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b46:	ea01 0203 	and.w	r2, r1, r3
 8001b4a:	ea21 0103 	bic.w	r1, r1, r3
 8001b4e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001b52:	6181      	str	r1, [r0, #24]
}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop

08001b58 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001b5a:	6951      	ldr	r1, [r2, #20]
 8001b5c:	4201      	tst	r1, r0
 8001b5e:	d100      	bne.n	8001b62 <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001b60:	4770      	bx	lr
{
 8001b62:	b508      	push	{r3, lr}
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b64:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b66:	f7ff fb7d 	bl	8001264 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b6a:	bd08      	pop	{r3, pc}
 8001b6c:	40013c00 	.word	0x40013c00

08001b70 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b70:	2800      	cmp	r0, #0
 8001b72:	f000 81a2 	beq.w	8001eba <HAL_RCC_OscConfig+0x34a>
{
 8001b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b7a:	6803      	ldr	r3, [r0, #0]
 8001b7c:	07dd      	lsls	r5, r3, #31
{
 8001b7e:	b082      	sub	sp, #8
 8001b80:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b82:	d52f      	bpl.n	8001be4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b84:	499e      	ldr	r1, [pc, #632]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001b86:	688a      	ldr	r2, [r1, #8]
 8001b88:	f002 020c 	and.w	r2, r2, #12
 8001b8c:	2a04      	cmp	r2, #4
 8001b8e:	f000 80ed 	beq.w	8001d6c <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	688a      	ldr	r2, [r1, #8]
 8001b94:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b98:	2a08      	cmp	r2, #8
 8001b9a:	f000 80e3 	beq.w	8001d64 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b9e:	6863      	ldr	r3, [r4, #4]
 8001ba0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba4:	f000 80ec 	beq.w	8001d80 <HAL_RCC_OscConfig+0x210>
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bac:	f000 8175 	beq.w	8001e9a <HAL_RCC_OscConfig+0x32a>
 8001bb0:	4d93      	ldr	r5, [pc, #588]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001bb2:	682a      	ldr	r2, [r5, #0]
 8001bb4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bb8:	602a      	str	r2, [r5, #0]
 8001bba:	682a      	ldr	r2, [r5, #0]
 8001bbc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bc0:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 80e1 	bne.w	8001d8a <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fcdc 	bl	8001584 <HAL_GetTick>
 8001bcc:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bce:	e005      	b.n	8001bdc <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fcd8 	bl	8001584 <HAL_GetTick>
 8001bd4:	1b80      	subs	r0, r0, r6
 8001bd6:	2864      	cmp	r0, #100	; 0x64
 8001bd8:	f200 8101 	bhi.w	8001dde <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bdc:	682b      	ldr	r3, [r5, #0]
 8001bde:	039b      	lsls	r3, r3, #14
 8001be0:	d4f6      	bmi.n	8001bd0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	079f      	lsls	r7, r3, #30
 8001be6:	d528      	bpl.n	8001c3a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001be8:	4a85      	ldr	r2, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001bea:	6891      	ldr	r1, [r2, #8]
 8001bec:	f011 0f0c 	tst.w	r1, #12
 8001bf0:	f000 8090 	beq.w	8001d14 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf4:	6891      	ldr	r1, [r2, #8]
 8001bf6:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bfa:	2908      	cmp	r1, #8
 8001bfc:	f000 8086 	beq.w	8001d0c <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c00:	68e3      	ldr	r3, [r4, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	f000 810e 	beq.w	8001e24 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	4e7d      	ldr	r6, [pc, #500]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c10:	f7ff fcb8 	bl	8001584 <HAL_GetTick>
 8001c14:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c16:	e005      	b.n	8001c24 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c18:	f7ff fcb4 	bl	8001584 <HAL_GetTick>
 8001c1c:	1b40      	subs	r0, r0, r5
 8001c1e:	2802      	cmp	r0, #2
 8001c20:	f200 80dd 	bhi.w	8001dde <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c24:	6833      	ldr	r3, [r6, #0]
 8001c26:	0798      	lsls	r0, r3, #30
 8001c28:	d5f6      	bpl.n	8001c18 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	6833      	ldr	r3, [r6, #0]
 8001c2c:	6922      	ldr	r2, [r4, #16]
 8001c2e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c32:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c36:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c38:	6823      	ldr	r3, [r4, #0]
 8001c3a:	071a      	lsls	r2, r3, #28
 8001c3c:	d451      	bmi.n	8001ce2 <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3e:	0758      	lsls	r0, r3, #29
 8001c40:	d52f      	bpl.n	8001ca2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c42:	4a6f      	ldr	r2, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001c44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001c46:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	d07f      	beq.n	8001d4c <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8001c4c:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c4e:	4e6e      	ldr	r6, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x298>)
 8001c50:	6833      	ldr	r3, [r6, #0]
 8001c52:	05d9      	lsls	r1, r3, #23
 8001c54:	f140 80b3 	bpl.w	8001dbe <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c58:	68a3      	ldr	r3, [r4, #8]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	f000 80c3 	beq.w	8001de6 <HAL_RCC_OscConfig+0x276>
 8001c60:	2b05      	cmp	r3, #5
 8001c62:	f000 812c 	beq.w	8001ebe <HAL_RCC_OscConfig+0x34e>
 8001c66:	4e66      	ldr	r6, [pc, #408]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001c68:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001c6a:	f022 0201 	bic.w	r2, r2, #1
 8001c6e:	6732      	str	r2, [r6, #112]	; 0x70
 8001c70:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8001c72:	f022 0204 	bic.w	r2, r2, #4
 8001c76:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f040 80b9 	bne.w	8001df0 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff fc81 	bl	8001584 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c82:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001c86:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c88:	e005      	b.n	8001c96 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fc7b 	bl	8001584 <HAL_GetTick>
 8001c8e:	1bc0      	subs	r0, r0, r7
 8001c90:	4540      	cmp	r0, r8
 8001c92:	f200 80a4 	bhi.w	8001dde <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c96:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001c98:	0798      	lsls	r0, r3, #30
 8001c9a:	d4f6      	bmi.n	8001c8a <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c9c:	2d00      	cmp	r5, #0
 8001c9e:	f040 8106 	bne.w	8001eae <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ca2:	69a0      	ldr	r0, [r4, #24]
 8001ca4:	b1c8      	cbz	r0, 8001cda <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ca6:	4d56      	ldr	r5, [pc, #344]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001ca8:	68ab      	ldr	r3, [r5, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b08      	cmp	r3, #8
 8001cb0:	f000 80c9 	beq.w	8001e46 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_OscConfig+0x294>)
 8001cb6:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cb8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001cba:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cbc:	f000 8109 	beq.w	8001ed2 <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fc60 	bl	8001584 <HAL_GetTick>
 8001cc4:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc6:	e005      	b.n	8001cd4 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff fc5c 	bl	8001584 <HAL_GetTick>
 8001ccc:	1b00      	subs	r0, r0, r4
 8001cce:	2802      	cmp	r0, #2
 8001cd0:	f200 8085 	bhi.w	8001dde <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	019b      	lsls	r3, r3, #6
 8001cd8:	d4f6      	bmi.n	8001cc8 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001cda:	2000      	movs	r0, #0
}
 8001cdc:	b002      	add	sp, #8
 8001cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ce2:	6963      	ldr	r3, [r4, #20]
 8001ce4:	b30b      	cbz	r3, 8001d2a <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8001ce6:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce8:	4e45      	ldr	r6, [pc, #276]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8001cea:	2201      	movs	r2, #1
 8001cec:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001cf0:	f7ff fc48 	bl	8001584 <HAL_GetTick>
 8001cf4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	e004      	b.n	8001d02 <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fc44 	bl	8001584 <HAL_GetTick>
 8001cfc:	1b40      	subs	r0, r0, r5
 8001cfe:	2802      	cmp	r0, #2
 8001d00:	d86d      	bhi.n	8001dde <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001d04:	079b      	lsls	r3, r3, #30
 8001d06:	d5f7      	bpl.n	8001cf8 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	e798      	b.n	8001c3e <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d0c:	6852      	ldr	r2, [r2, #4]
 8001d0e:	0256      	lsls	r6, r2, #9
 8001d10:	f53f af76 	bmi.w	8001c00 <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d14:	4a3a      	ldr	r2, [pc, #232]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	0795      	lsls	r5, r2, #30
 8001d1a:	d544      	bpl.n	8001da6 <HAL_RCC_OscConfig+0x236>
 8001d1c:	68e2      	ldr	r2, [r4, #12]
 8001d1e:	2a01      	cmp	r2, #1
 8001d20:	d041      	beq.n	8001da6 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8001d22:	2001      	movs	r0, #1
}
 8001d24:	b002      	add	sp, #8
 8001d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8001d2a:	4a36      	ldr	r2, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4e34      	ldr	r6, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8001d32:	f7ff fc27 	bl	8001584 <HAL_GetTick>
 8001d36:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	e004      	b.n	8001d44 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3a:	f7ff fc23 	bl	8001584 <HAL_GetTick>
 8001d3e:	1b40      	subs	r0, r0, r5
 8001d40:	2802      	cmp	r0, #2
 8001d42:	d84c      	bhi.n	8001dde <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d44:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8001d46:	079f      	lsls	r7, r3, #30
 8001d48:	d4f7      	bmi.n	8001d3a <HAL_RCC_OscConfig+0x1ca>
 8001d4a:	e7dd      	b.n	8001d08 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	; 0x40
 8001d56:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d60:	2501      	movs	r5, #1
 8001d62:	e774      	b.n	8001c4e <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d64:	684a      	ldr	r2, [r1, #4]
 8001d66:	0250      	lsls	r0, r2, #9
 8001d68:	f57f af19 	bpl.w	8001b9e <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	0391      	lsls	r1, r2, #14
 8001d72:	f57f af37 	bpl.w	8001be4 <HAL_RCC_OscConfig+0x74>
 8001d76:	6862      	ldr	r2, [r4, #4]
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	f47f af33 	bne.w	8001be4 <HAL_RCC_OscConfig+0x74>
 8001d7e:	e7d0      	b.n	8001d22 <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d80:	4a1f      	ldr	r2, [pc, #124]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001d82:	6813      	ldr	r3, [r2, #0]
 8001d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d88:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d8a:	f7ff fbfb 	bl	8001584 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	4e1c      	ldr	r6, [pc, #112]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8001d90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e004      	b.n	8001d9e <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fbf6 	bl	8001584 <HAL_GetTick>
 8001d98:	1b40      	subs	r0, r0, r5
 8001d9a:	2864      	cmp	r0, #100	; 0x64
 8001d9c:	d81f      	bhi.n	8001dde <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	6833      	ldr	r3, [r6, #0]
 8001da0:	039a      	lsls	r2, r3, #14
 8001da2:	d5f7      	bpl.n	8001d94 <HAL_RCC_OscConfig+0x224>
 8001da4:	e71d      	b.n	8001be2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4916      	ldr	r1, [pc, #88]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001da8:	6920      	ldr	r0, [r4, #16]
 8001daa:	680a      	ldr	r2, [r1, #0]
 8001dac:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001db0:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8001db4:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	071a      	lsls	r2, r3, #28
 8001db8:	f57f af41 	bpl.w	8001c3e <HAL_RCC_OscConfig+0xce>
 8001dbc:	e791      	b.n	8001ce2 <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	6833      	ldr	r3, [r6, #0]
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001dc6:	f7ff fbdd 	bl	8001584 <HAL_GetTick>
 8001dca:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	6833      	ldr	r3, [r6, #0]
 8001dce:	05da      	lsls	r2, r3, #23
 8001dd0:	f53f af42 	bmi.w	8001c58 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7ff fbd6 	bl	8001584 <HAL_GetTick>
 8001dd8:	1bc0      	subs	r0, r0, r7
 8001dda:	2802      	cmp	r0, #2
 8001ddc:	d9f6      	bls.n	8001dcc <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8001dde:	2003      	movs	r0, #3
}
 8001de0:	b002      	add	sp, #8
 8001de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001de6:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
 8001de8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001df0:	f7ff fbc8 	bl	8001584 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	4f02      	ldr	r7, [pc, #8]	; (8001e00 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8001df6:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCC_OscConfig+0x2a6>
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	42470000 	.word	0x42470000
 8001e08:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fbba 	bl	8001584 <HAL_GetTick>
 8001e10:	1b80      	subs	r0, r0, r6
 8001e12:	4540      	cmp	r0, r8
 8001e14:	d8e3      	bhi.n	8001dde <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e18:	079b      	lsls	r3, r3, #30
 8001e1a:	d5f7      	bpl.n	8001e0c <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	f43f af40 	beq.w	8001ca2 <HAL_RCC_OscConfig+0x132>
 8001e22:	e044      	b.n	8001eae <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8001e24:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4e43      	ldr	r6, [pc, #268]	; (8001f34 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8001e28:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fbab 	bl	8001584 <HAL_GetTick>
 8001e2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e30:	e004      	b.n	8001e3c <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fba7 	bl	8001584 <HAL_GetTick>
 8001e36:	1b40      	subs	r0, r0, r5
 8001e38:	2802      	cmp	r0, #2
 8001e3a:	d8d0      	bhi.n	8001dde <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3c:	6833      	ldr	r3, [r6, #0]
 8001e3e:	0799      	lsls	r1, r3, #30
 8001e40:	d4f7      	bmi.n	8001e32 <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	e6f9      	b.n	8001c3a <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e46:	2801      	cmp	r0, #1
 8001e48:	f43f af48 	beq.w	8001cdc <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8001e4c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e4e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e50:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e54:	4291      	cmp	r1, r2
 8001e56:	f47f af64 	bne.w	8001d22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5c:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e60:	4291      	cmp	r1, r2
 8001e62:	f47f af5e 	bne.w	8001d22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e66:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e68:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001e6c:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e6e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001e72:	f47f af56 	bne.w	8001d22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e76:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e78:	0852      	lsrs	r2, r2, #1
 8001e7a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001e7e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e80:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001e84:	f47f af4d 	bne.w	8001d22 <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e8a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8001e92:	bf14      	ite	ne
 8001e94:	2001      	movne	r0, #1
 8001e96:	2000      	moveq	r0, #0
 8001e98:	e720      	b.n	8001cdc <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x3c4>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	e76d      	b.n	8001d8a <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eae:	4a21      	ldr	r2, [pc, #132]	; (8001f34 <HAL_RCC_OscConfig+0x3c4>)
 8001eb0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb8:	e6f3      	b.n	8001ca2 <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8001eba:	2001      	movs	r0, #1
}
 8001ebc:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	; (8001f34 <HAL_RCC_OscConfig+0x3c4>)
 8001ec0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ec2:	f042 0204 	orr.w	r2, r2, #4
 8001ec6:	671a      	str	r2, [r3, #112]	; 0x70
 8001ec8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eca:	f042 0201 	orr.w	r2, r2, #1
 8001ece:	671a      	str	r2, [r3, #112]	; 0x70
 8001ed0:	e78e      	b.n	8001df0 <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fb57 	bl	8001584 <HAL_GetTick>
 8001ed6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ed8:	e005      	b.n	8001ee6 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fb53 	bl	8001584 <HAL_GetTick>
 8001ede:	1b80      	subs	r0, r0, r6
 8001ee0:	2802      	cmp	r0, #2
 8001ee2:	f63f af7c 	bhi.w	8001dde <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee6:	682b      	ldr	r3, [r5, #0]
 8001ee8:	0199      	lsls	r1, r3, #6
 8001eea:	d4f6      	bmi.n	8001eda <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eec:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8001ef0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001ef8:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8001efc:	0852      	lsrs	r2, r2, #1
 8001efe:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001f02:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001f04:	490a      	ldr	r1, [pc, #40]	; (8001f30 <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001f0a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f0c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001f0e:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001f10:	f7ff fb38 	bl	8001584 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f14:	4d07      	ldr	r5, [pc, #28]	; (8001f34 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8001f16:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f18:	e005      	b.n	8001f26 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7ff fb33 	bl	8001584 <HAL_GetTick>
 8001f1e:	1b00      	subs	r0, r0, r4
 8001f20:	2802      	cmp	r0, #2
 8001f22:	f63f af5c 	bhi.w	8001dde <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f26:	682b      	ldr	r3, [r5, #0]
 8001f28:	019a      	lsls	r2, r3, #6
 8001f2a:	d5f6      	bpl.n	8001f1a <HAL_RCC_OscConfig+0x3aa>
 8001f2c:	e6d5      	b.n	8001cda <HAL_RCC_OscConfig+0x16a>
 8001f2e:	bf00      	nop
 8001f30:	42470000 	.word	0x42470000
 8001f34:	40023800 	.word	0x40023800

08001f38 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f38:	4916      	ldr	r1, [pc, #88]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8001f3a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f3c:	688b      	ldr	r3, [r1, #8]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d01b      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x46>
 8001f46:	2b08      	cmp	r3, #8
 8001f48:	d117      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f4a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f4c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f4e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f50:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f54:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f58:	d113      	bne.n	8001f82 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f5a:	480f      	ldr	r0, [pc, #60]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x60>)
 8001f5c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f60:	fba1 0100 	umull	r0, r1, r1, r0
 8001f64:	f7fe fb7c 	bl	8000660 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f70:	3301      	adds	r3, #1
 8001f72:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001f74:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f78:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001f7a:	4807      	ldr	r0, [pc, #28]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8001f7c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f7e:	4807      	ldr	r0, [pc, #28]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001f80:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f82:	4806      	ldr	r0, [pc, #24]	; (8001f9c <HAL_RCC_GetSysClockFreq+0x64>)
 8001f84:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001f88:	2300      	movs	r3, #0
 8001f8a:	fba1 0100 	umull	r0, r1, r1, r0
 8001f8e:	f7fe fb67 	bl	8000660 <__aeabi_uldivmod>
 8001f92:	e7e9      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x30>
 8001f94:	40023800 	.word	0x40023800
 8001f98:	00f42400 	.word	0x00f42400
 8001f9c:	007a1200 	.word	0x007a1200

08001fa0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001fa0:	2800      	cmp	r0, #0
 8001fa2:	f000 8087 	beq.w	80020b4 <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fa6:	4a48      	ldr	r2, [pc, #288]	; (80020c8 <HAL_RCC_ClockConfig+0x128>)
 8001fa8:	6813      	ldr	r3, [r2, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	428b      	cmp	r3, r1
{
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb4:	460d      	mov	r5, r1
 8001fb6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb8:	d209      	bcs.n	8001fce <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	b2cb      	uxtb	r3, r1
 8001fbc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fbe:	6813      	ldr	r3, [r2, #0]
 8001fc0:	f003 0307 	and.w	r3, r3, #7
 8001fc4:	428b      	cmp	r3, r1
 8001fc6:	d002      	beq.n	8001fce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001fc8:	2001      	movs	r0, #1
}
 8001fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	0798      	lsls	r0, r3, #30
 8001fd2:	d514      	bpl.n	8001ffe <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	0759      	lsls	r1, r3, #29
 8001fd6:	d504      	bpl.n	8001fe2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd8:	493c      	ldr	r1, [pc, #240]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 8001fda:	688a      	ldr	r2, [r1, #8]
 8001fdc:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001fe0:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	071a      	lsls	r2, r3, #28
 8001fe4:	d504      	bpl.n	8001ff0 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe6:	4939      	ldr	r1, [pc, #228]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 8001fe8:	688a      	ldr	r2, [r1, #8]
 8001fea:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001fee:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4936      	ldr	r1, [pc, #216]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 8001ff2:	68a0      	ldr	r0, [r4, #8]
 8001ff4:	688a      	ldr	r2, [r1, #8]
 8001ff6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ffa:	4302      	orrs	r2, r0
 8001ffc:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	07df      	lsls	r7, r3, #31
 8002000:	d521      	bpl.n	8002046 <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	6862      	ldr	r2, [r4, #4]
 8002004:	2a01      	cmp	r2, #1
 8002006:	d057      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002008:	1e93      	subs	r3, r2, #2
 800200a:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 800200e:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002010:	d94d      	bls.n	80020ae <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002012:	0799      	lsls	r1, r3, #30
 8002014:	d5d8      	bpl.n	8001fc8 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002016:	4e2d      	ldr	r6, [pc, #180]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 8002018:	68b3      	ldr	r3, [r6, #8]
 800201a:	f023 0303 	bic.w	r3, r3, #3
 800201e:	4313      	orrs	r3, r2
 8002020:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002022:	f7ff faaf 	bl	8001584 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002026:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800202a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800202c:	e004      	b.n	8002038 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f7ff faa9 	bl	8001584 <HAL_GetTick>
 8002032:	1bc0      	subs	r0, r0, r7
 8002034:	4540      	cmp	r0, r8
 8002036:	d844      	bhi.n	80020c2 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002038:	68b3      	ldr	r3, [r6, #8]
 800203a:	6862      	ldr	r2, [r4, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002044:	d1f3      	bne.n	800202e <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002046:	4a20      	ldr	r2, [pc, #128]	; (80020c8 <HAL_RCC_ClockConfig+0x128>)
 8002048:	6813      	ldr	r3, [r2, #0]
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	42ab      	cmp	r3, r5
 8002050:	d906      	bls.n	8002060 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002052:	b2eb      	uxtb	r3, r5
 8002054:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	6813      	ldr	r3, [r2, #0]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	42ab      	cmp	r3, r5
 800205e:	d1b3      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	075a      	lsls	r2, r3, #29
 8002064:	d506      	bpl.n	8002074 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002066:	4919      	ldr	r1, [pc, #100]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 8002068:	68e0      	ldr	r0, [r4, #12]
 800206a:	688a      	ldr	r2, [r1, #8]
 800206c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002070:	4302      	orrs	r2, r0
 8002072:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002074:	071b      	lsls	r3, r3, #28
 8002076:	d507      	bpl.n	8002088 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002078:	4a14      	ldr	r2, [pc, #80]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 800207a:	6921      	ldr	r1, [r4, #16]
 800207c:	6893      	ldr	r3, [r2, #8]
 800207e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002082:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002086:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002088:	f7ff ff56 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 800208c:	4a0f      	ldr	r2, [pc, #60]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 800208e:	4c10      	ldr	r4, [pc, #64]	; (80020d0 <HAL_RCC_ClockConfig+0x130>)
 8002090:	6892      	ldr	r2, [r2, #8]
 8002092:	4910      	ldr	r1, [pc, #64]	; (80020d4 <HAL_RCC_ClockConfig+0x134>)
 8002094:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002098:	4603      	mov	r3, r0
 800209a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 800209c:	480e      	ldr	r0, [pc, #56]	; (80020d8 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800209e:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 80020a0:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020a2:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 80020a4:	f7ff fa24 	bl	80014f0 <HAL_InitTick>
  return HAL_OK;
 80020a8:	2000      	movs	r0, #0
}
 80020aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ae:	0198      	lsls	r0, r3, #6
 80020b0:	d4b1      	bmi.n	8002016 <HAL_RCC_ClockConfig+0x76>
 80020b2:	e789      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80020b4:	2001      	movs	r0, #1
}
 80020b6:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_RCC_ClockConfig+0x12c>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	039e      	lsls	r6, r3, #14
 80020be:	d4aa      	bmi.n	8002016 <HAL_RCC_ClockConfig+0x76>
 80020c0:	e782      	b.n	8001fc8 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
 80020c4:	e781      	b.n	8001fca <HAL_RCC_ClockConfig+0x2a>
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00
 80020cc:	40023800 	.word	0x40023800
 80020d0:	08002574 	.word	0x08002574
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000010 	.word	0x20000010

080020dc <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020dc:	2800      	cmp	r0, #0
 80020de:	d076      	beq.n	80021ce <HAL_TIM_Base_Init+0xf2>
{
 80020e0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020e2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020e6:	4604      	mov	r4, r0
 80020e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d055      	beq.n	800219c <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020f0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f2:	4938      	ldr	r1, [pc, #224]	; (80021d4 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fa:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80020fc:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020fe:	d052      	beq.n	80021a6 <HAL_TIM_Base_Init+0xca>
 8002100:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002104:	d021      	beq.n	800214a <HAL_TIM_Base_Init+0x6e>
 8002106:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 800210a:	428a      	cmp	r2, r1
 800210c:	d01d      	beq.n	800214a <HAL_TIM_Base_Init+0x6e>
 800210e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002112:	428a      	cmp	r2, r1
 8002114:	d019      	beq.n	800214a <HAL_TIM_Base_Init+0x6e>
 8002116:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800211a:	428a      	cmp	r2, r1
 800211c:	d015      	beq.n	800214a <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800211e:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8002122:	428a      	cmp	r2, r1
 8002124:	d015      	beq.n	8002152 <HAL_TIM_Base_Init+0x76>
 8002126:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800212a:	428a      	cmp	r2, r1
 800212c:	d011      	beq.n	8002152 <HAL_TIM_Base_Init+0x76>
 800212e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8002132:	428a      	cmp	r2, r1
 8002134:	d00d      	beq.n	8002152 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002136:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002138:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800213a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800213e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8002140:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002142:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002144:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002146:	6293      	str	r3, [r2, #40]	; 0x28
 8002148:	e010      	b.n	800216c <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800214a:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002150:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002152:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002154:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800215a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800215c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002160:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002162:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8002164:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8002166:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002168:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800216a:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800216c:	2301      	movs	r3, #1
 800216e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002170:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002178:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800217c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002180:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002184:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002188:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800218c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002190:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002194:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002198:	2000      	movs	r0, #0
}
 800219a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800219c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80021a0:	f7ff f8ee 	bl	8001380 <HAL_TIM_Base_MspInit>
 80021a4:	e7a4      	b.n	80020f0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80021a6:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021a8:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021ae:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80021b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021b4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021b6:	69a1      	ldr	r1, [r4, #24]
 80021b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021bc:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80021be:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021c0:	68e3      	ldr	r3, [r4, #12]
 80021c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80021c4:	6863      	ldr	r3, [r4, #4]
 80021c6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80021c8:	6963      	ldr	r3, [r4, #20]
 80021ca:	6313      	str	r3, [r2, #48]	; 0x30
 80021cc:	e7ce      	b.n	800216c <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 80021ce:	2001      	movs	r0, #1
}
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	40010000 	.word	0x40010000

080021d8 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80021d8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d127      	bne.n	8002230 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021e0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021e2:	4915      	ldr	r1, [pc, #84]	; (8002238 <HAL_TIM_Base_Start_IT+0x60>)
  htim->State = HAL_TIM_STATE_BUSY;
 80021e4:	2202      	movs	r2, #2
 80021e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ea:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ec:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021ee:	f042 0201 	orr.w	r2, r2, #1
 80021f2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021f4:	d011      	beq.n	800221a <HAL_TIM_Base_Start_IT+0x42>
 80021f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fa:	d00e      	beq.n	800221a <HAL_TIM_Base_Start_IT+0x42>
 80021fc:	4a0f      	ldr	r2, [pc, #60]	; (800223c <HAL_TIM_Base_Start_IT+0x64>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00b      	beq.n	800221a <HAL_TIM_Base_Start_IT+0x42>
 8002202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_TIM_Base_Start_IT+0x42>
 800220a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800220e:	4293      	cmp	r3, r2
 8002210:	d003      	beq.n	800221a <HAL_TIM_Base_Start_IT+0x42>
 8002212:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8002216:	4293      	cmp	r3, r2
 8002218:	d104      	bne.n	8002224 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002220:	2a06      	cmp	r2, #6
 8002222:	d007      	beq.n	8002234 <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 800222a:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	4770      	bx	lr
    return HAL_ERROR;
 8002230:	2001      	movs	r0, #1
 8002232:	4770      	bx	lr
  return HAL_OK;
 8002234:	2000      	movs	r0, #0
}
 8002236:	4770      	bx	lr
 8002238:	40010000 	.word	0x40010000
 800223c:	40000400 	.word	0x40000400

08002240 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002240:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d075      	beq.n	8002334 <HAL_TIM_ConfigClockSource+0xf4>
 8002248:	4602      	mov	r2, r0
{
 800224a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 800224e:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002250:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002254:	2001      	movs	r0, #1
 8002256:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800225a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800225c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002260:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002264:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002266:	680b      	ldr	r3, [r1, #0]
 8002268:	2b60      	cmp	r3, #96	; 0x60
 800226a:	d065      	beq.n	8002338 <HAL_TIM_ConfigClockSource+0xf8>
 800226c:	d824      	bhi.n	80022b8 <HAL_TIM_ConfigClockSource+0x78>
 800226e:	2b40      	cmp	r3, #64	; 0x40
 8002270:	d07c      	beq.n	800236c <HAL_TIM_ConfigClockSource+0x12c>
 8002272:	d94b      	bls.n	800230c <HAL_TIM_ConfigClockSource+0xcc>
 8002274:	2b50      	cmp	r3, #80	; 0x50
 8002276:	d117      	bne.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002278:	6848      	ldr	r0, [r1, #4]
 800227a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800227c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227e:	6a23      	ldr	r3, [r4, #32]
 8002280:	f023 0301 	bic.w	r3, r3, #1
 8002284:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002286:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002288:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800228c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002290:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002292:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002296:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8002298:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800229a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800229c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80022a0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022a6:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 80022a8:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80022aa:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80022ac:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022b0:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 80022b4:	bc30      	pop	{r4, r5}
 80022b6:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80022b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022bc:	d038      	beq.n	8002330 <HAL_TIM_ConfigClockSource+0xf0>
 80022be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022c2:	d110      	bne.n	80022e6 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022c4:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80022c8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ca:	432b      	orrs	r3, r5
 80022cc:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ce:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80022d6:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80022d8:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022da:	68a3      	ldr	r3, [r4, #8]
 80022dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 80022e0:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022e2:	60a3      	str	r3, [r4, #8]
      break;
 80022e4:	e7e0      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80022e6:	2b70      	cmp	r3, #112	; 0x70
 80022e8:	d1de      	bne.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022ea:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80022ee:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022f0:	432b      	orrs	r3, r5
 80022f2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022f4:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80022f8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 80022fc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80022fe:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002300:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002302:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8002308:	60a3      	str	r3, [r4, #8]
      break;
 800230a:	e7cd      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800230c:	2b20      	cmp	r3, #32
 800230e:	d002      	beq.n	8002316 <HAL_TIM_ConfigClockSource+0xd6>
 8002310:	d90a      	bls.n	8002328 <HAL_TIM_ConfigClockSource+0xe8>
 8002312:	2b30      	cmp	r3, #48	; 0x30
 8002314:	d1c8      	bne.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8002316:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002318:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800231c:	430b      	orrs	r3, r1
 800231e:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 8002322:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002324:	60a3      	str	r3, [r4, #8]
}
 8002326:	e7bf      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8002328:	f033 0110 	bics.w	r1, r3, #16
 800232c:	d1bc      	bne.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
 800232e:	e7f2      	b.n	8002316 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 8002330:	2000      	movs	r0, #0
 8002332:	e7b9      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 8002334:	2002      	movs	r0, #2
}
 8002336:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002338:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800233a:	68cb      	ldr	r3, [r1, #12]
 800233c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800233e:	f020 0010 	bic.w	r0, r0, #16
 8002342:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002344:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002346:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800234a:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 800234e:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8002350:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002352:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002356:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 800235a:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800235c:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002362:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 8002368:	60a3      	str	r3, [r4, #8]
}
 800236a:	e79d      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800236c:	6848      	ldr	r0, [r1, #4]
 800236e:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8002370:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002372:	6a23      	ldr	r3, [r4, #32]
 8002374:	f023 0301 	bic.w	r3, r3, #1
 8002378:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800237a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800237c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002380:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8002384:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002386:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800238a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800238c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800238e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002394:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800239a:	60a3      	str	r3, [r4, #8]
}
 800239c:	e784      	b.n	80022a8 <HAL_TIM_ConfigClockSource+0x68>
 800239e:	bf00      	nop

080023a0 <HAL_TIM_OC_DelayElapsedCallback>:
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop

080023a4 <HAL_TIM_IC_CaptureCallback>:
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop

080023a8 <HAL_TIM_PWM_PulseFinishedCallback>:
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop

080023ac <HAL_TIM_TriggerCallback>:
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop

080023b0 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023b0:	6803      	ldr	r3, [r0, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	0791      	lsls	r1, r2, #30
{
 80023b6:	b510      	push	{r4, lr}
 80023b8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023ba:	d502      	bpl.n	80023c2 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	0792      	lsls	r2, r2, #30
 80023c0:	d45f      	bmi.n	8002482 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	0750      	lsls	r0, r2, #29
 80023c6:	d502      	bpl.n	80023ce <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	0751      	lsls	r1, r2, #29
 80023cc:	d446      	bmi.n	800245c <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	0712      	lsls	r2, r2, #28
 80023d2:	d502      	bpl.n	80023da <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	0710      	lsls	r0, r2, #28
 80023d8:	d42e      	bmi.n	8002438 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023da:	691a      	ldr	r2, [r3, #16]
 80023dc:	06d2      	lsls	r2, r2, #27
 80023de:	d502      	bpl.n	80023e6 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	06d0      	lsls	r0, r2, #27
 80023e4:	d418      	bmi.n	8002418 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	07d1      	lsls	r1, r2, #31
 80023ea:	d502      	bpl.n	80023f2 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	07d2      	lsls	r2, r2, #31
 80023f0:	d45d      	bmi.n	80024ae <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	0610      	lsls	r0, r2, #24
 80023f6:	d502      	bpl.n	80023fe <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	0611      	lsls	r1, r2, #24
 80023fc:	d45f      	bmi.n	80024be <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	0652      	lsls	r2, r2, #25
 8002402:	d502      	bpl.n	800240a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	0650      	lsls	r0, r2, #25
 8002408:	d461      	bmi.n	80024ce <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	0691      	lsls	r1, r2, #26
 800240e:	d502      	bpl.n	8002416 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	0692      	lsls	r2, r2, #26
 8002414:	d443      	bmi.n	800249e <HAL_TIM_IRQHandler+0xee>
}
 8002416:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002418:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800241c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800241e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002420:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002428:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800242a:	d064      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800242c:	f7ff ffba 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002430:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002432:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002434:	7722      	strb	r2, [r4, #28]
 8002436:	e7d6      	b.n	80023e6 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002438:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800243c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800243e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002440:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002448:	d152      	bne.n	80024f0 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244a:	f7ff ffa9 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800244e:	4620      	mov	r0, r4
 8002450:	f7ff ffaa 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002454:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002456:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002458:	7722      	strb	r2, [r4, #28]
 800245a:	e7be      	b.n	80023da <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800245c:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002460:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002462:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002464:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800246c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800246e:	d13c      	bne.n	80024ea <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002470:	f7ff ff96 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002474:	4620      	mov	r0, r4
 8002476:	f7ff ff97 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800247c:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	7722      	strb	r2, [r4, #28]
 8002480:	e7a5      	b.n	80023ce <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002482:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002486:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002488:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800248a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	079b      	lsls	r3, r3, #30
 8002490:	d025      	beq.n	80024de <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002492:	f7ff ff87 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002496:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002498:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800249a:	7722      	strb	r2, [r4, #28]
 800249c:	e791      	b.n	80023c2 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800249e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80024a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024a4:	611a      	str	r2, [r3, #16]
}
 80024a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80024aa:	f000 b82b 	b.w	8002504 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ae:	f06f 0201 	mvn.w	r2, #1
 80024b2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b4:	4620      	mov	r0, r4
 80024b6:	f7fe fec9 	bl	800124c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	e799      	b.n	80023f2 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024c2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80024c4:	4620      	mov	r0, r4
 80024c6:	f000 f81f 	bl	8002508 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	e797      	b.n	80023fe <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff ff69 	bl	80023ac <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	e795      	b.n	800240a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024de:	f7ff ff5f 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024e2:	4620      	mov	r0, r4
 80024e4:	f7ff ff60 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
 80024e8:	e7d5      	b.n	8002496 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80024ea:	f7ff ff5b 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
 80024ee:	e7c4      	b.n	800247a <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80024f0:	f7ff ff58 	bl	80023a4 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e7ae      	b.n	8002454 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	f7ff ff53 	bl	80023a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7ff ff54 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002500:	e796      	b.n	8002430 <HAL_TIM_IRQHandler+0x80>
 8002502:	bf00      	nop

08002504 <HAL_TIMEx_CommutCallback>:
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop

08002508 <HAL_TIMEx_BreakCallback>:
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop

0800250c <abs>:
 800250c:	2800      	cmp	r0, #0
 800250e:	bfb8      	it	lt
 8002510:	4240      	neglt	r0, r0
 8002512:	4770      	bx	lr

08002514 <__libc_init_array>:
 8002514:	b570      	push	{r4, r5, r6, lr}
 8002516:	4d0d      	ldr	r5, [pc, #52]	; (800254c <__libc_init_array+0x38>)
 8002518:	4c0d      	ldr	r4, [pc, #52]	; (8002550 <__libc_init_array+0x3c>)
 800251a:	1b64      	subs	r4, r4, r5
 800251c:	10a4      	asrs	r4, r4, #2
 800251e:	2600      	movs	r6, #0
 8002520:	42a6      	cmp	r6, r4
 8002522:	d109      	bne.n	8002538 <__libc_init_array+0x24>
 8002524:	4d0b      	ldr	r5, [pc, #44]	; (8002554 <__libc_init_array+0x40>)
 8002526:	4c0c      	ldr	r4, [pc, #48]	; (8002558 <__libc_init_array+0x44>)
 8002528:	f000 f818 	bl	800255c <_init>
 800252c:	1b64      	subs	r4, r4, r5
 800252e:	10a4      	asrs	r4, r4, #2
 8002530:	2600      	movs	r6, #0
 8002532:	42a6      	cmp	r6, r4
 8002534:	d105      	bne.n	8002542 <__libc_init_array+0x2e>
 8002536:	bd70      	pop	{r4, r5, r6, pc}
 8002538:	f855 3b04 	ldr.w	r3, [r5], #4
 800253c:	4798      	blx	r3
 800253e:	3601      	adds	r6, #1
 8002540:	e7ee      	b.n	8002520 <__libc_init_array+0xc>
 8002542:	f855 3b04 	ldr.w	r3, [r5], #4
 8002546:	4798      	blx	r3
 8002548:	3601      	adds	r6, #1
 800254a:	e7f2      	b.n	8002532 <__libc_init_array+0x1e>
 800254c:	0800258c 	.word	0x0800258c
 8002550:	0800258c 	.word	0x0800258c
 8002554:	0800258c 	.word	0x0800258c
 8002558:	08002590 	.word	0x08002590

0800255c <_init>:
 800255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255e:	bf00      	nop
 8002560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002562:	bc08      	pop	{r3}
 8002564:	469e      	mov	lr, r3
 8002566:	4770      	bx	lr

08002568 <_fini>:
 8002568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800256a:	bf00      	nop
 800256c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800256e:	bc08      	pop	{r3}
 8002570:	469e      	mov	lr, r3
 8002572:	4770      	bx	lr
